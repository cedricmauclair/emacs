(interface ((xmlns:cd . "http://www.pragma-ade.com/commands") (name . "context") (language . "en") (version . "2006.08.02")) (define ((name . "align")) (constant ((type . "inner")) "") (constant ((type . "outer")) "") (constant ((type . "left")) "") (constant ((type . "right")) "") (constant ((type . "flushleft")) "") (constant ((type . "flushright")) "") (constant ((type . "middle")) "") (constant ((type . "center")) "") (constant ((type . "normal")) "") (constant ((type . "no")) "") (constant ((type . "yes")) "")) (define ((name . "symalign")) (constant ((type . "left")) "") (constant ((type . "right")) "") (constant ((type . "flushleft")) "") (constant ((type . "flushright")) "") (constant ((type . "middle")) "") (constant ((type . "center")) "")) (define ((name . "indenting")) (constant ((type . "never")) "") (constant ((type . "none")) "") (constant ((type . "not")) "") (constant ((type . "no")) "") (constant ((type . "yes")) "") (constant ((type . "always")) "") (constant ((type . "first")) "") (constant ((type . "next")) "") (constant ((type . "small")) "") (constant ((type . "medium")) "") (constant ((type . "big")) "") (constant ((type . "normal")) "") (constant ((type . "odd")) "") (constant ((type . "even")) "") (constant ((type . "cd:dimension")) "")) (define ((name . "indentnext")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (define ((name . "style")) (constant ((type . "normal")) "") (constant ((type . "bold")) "") (constant ((type . "slanted")) "") (constant ((type . "boldslanted")) "") (constant ((type . "type")) "") (constant ((type . "cap")) "") (constant ((type . "small...")) "") (constant ((type . "cd:command")) "")) (define ((name . "language")) (constant ((type . "nl")) "") (constant ((type . "fr")) "") (constant ((type . "en")) "") (constant ((type . "uk")) "") (constant ((type . "de")) "") (constant ((type . "es")) "") (constant ((type . "cz")) "") (constant ((type . "..")) "")) (define ((name . "texts")) (constant ((type . "cd:text")) "") (constant ((type . "cd:section")) "") (constant ((type . "date")) "") (constant ((type . "cd:mark")) "") (constant ((type . "pagenumber")) "")) (define ((name . "layout-h")) (constant ((type . "text") (default . "yes")) "") (constant ((type . "margin")) "") (constant ((type . "edge")) "")) (define ((name . "layout-v")) (constant ((type . "top")) "") (constant ((type . "header")) "") (constant ((type . "text") (default . "yes")) "") (constant ((type . "footer")) "") (constant ((type . "bottom")) "")) (define ((name . "bodyfont")) (constant ((type . "5pt")) "") (constant ((type . "...")) "") (constant ((type . "12pt")) "") (constant ((type . "small")) "") (constant ((type . "big")) "")) (command ((name . "installlanguage") (file . "lang-ini.tex") (category . "language")) (sequence nil (string ((value . "installlanguage")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "spacing")) (constant ((type . "packed") (default . "yes")) "") (constant ((type . "broad")) "")) (parameter ((name . "lefthyphenmin")) (constant ((type . "cd:number") (default . "2")) "")) (parameter ((name . "righthyphenmin")) (constant ((type . "cd:number") (default . "2")) "")) (parameter ((name . "state")) (constant ((type . "start")) "") (constant ((type . "stop")) "")) (parameter ((name . "leftsentence")) (constant ((type . "cd:command") (default . "---")) "")) (parameter ((name . "rightsentence")) (constant ((type . "cd:command") (default . "---")) "")) (parameter ((name . "leftsubsentence")) (constant ((type . "cd:command") (default . "---")) "")) (parameter ((name . "rightsubsentence")) (constant ((type . "cd:command") (default . "---")) "")) (parameter ((name . "leftquote")) (constant ((type . "cd:command")) "")) (parameter ((name . "rightquote")) (constant ((type . "cd:command")) "")) (parameter ((name . "leftquotation")) (constant ((type . "cd:command")) "")) (parameter ((name . "rightquotation")) (constant ((type . "cd:command")) "")) (parameter ((name . "leftspeech")) (constant ((type . "cd:command")) "")) (parameter ((name . "middlespeech")) (constant ((type . "cd:command") (default . " ")) "")) (parameter ((name . "rightspeech")) (constant ((type . "cd:command")) "")) (parameter ((name . "limittext")) (constant ((type . "cd:text")) "")) (parameter ((name . "date")) (constant ((type . "cd:text")) "")) (parameter ((name . "compoundhyphen")) (constant ((type . "cd:command") (default . "\\compoundhyphen")) "")) (parameter ((name . "leftcompoundhyphen")) (constant ((type . "cd:command") (default . "\\compoundhyphen")) "")) (parameter ((name . "rightcompoundhyphen")) (constant ((type . "cd:command") (default . " ")) "")) (parameter ((name . "default")) (constant ((type . "cd:name")) ""))))) (command ((name . "setuplanguage") (file . "lang-ini.tex") (category . "language")) (sequence nil (string ((value . "setuplanguage")) "")) (arguments nil (keywords ((n . "1")) (resolve ((name . "language")) "")) (assignments ((n . "2") (list . "yes")) (inherit ((name . "installlanguage") (n . "2")) "")))) (command ((name . "language") (file . "lang-ini.tex") (category . "language")) (sequence nil (string ((value . "language")) "")) (arguments nil (keywords ((n . "1")) (resolve ((name . "language")) "")))) (command ((name . "mainlanguage") (file . "lang-ini.tex") (category . "language")) (sequence nil (string ((value . "mainlanguage")) "")) (arguments nil (keywords ((n . "1")) (resolve ((name . "language")) "")))) (command ((name . "translate") (file . "lang-lab.tex") (category . "language")) (sequence nil (string ((value . "translate")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "cd:name")) (constant ((type . "cd:text")) ""))))) (command ((name . "useencoding") (file . "enco-ini.tex") (category . "encoding")) (sequence nil (string ((value . "useencoding")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "cd:name")) "")))) (command ((name . "usespecials") (file . "spec-ini.tex")) (sequence nil (string ((value . "usespecials")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "reset")) "") (constant ((type . "cd:name")) "")))) (command ((name . "defineoutput") (file . "spec-ini.tex")) (sequence nil (string ((value . "defineoutput")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2") (list . "yes")) (constant ((type . "cd:name")) "")))) (command ((name . "setupoutput") (file . "spec-ini.tex")) (sequence nil (string ((value . "setupoutput")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "cd:name")) "")))) (command ((name . "definebodyfontenvironment") (file . "font-ini.tex") (category . "fonts")) (sequence nil (string ((value . "definebodyfontenvironment")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "cd:name")) "")) (keywords ((n . "2") (optional . "no")) (constant ((type . "5pt")) "") (constant ((type . "...")) "") (constant ((type . "12pt")) "") (constant ((type . "default")) "")) (assignments ((n . "3") (optional . "yes") (list . "yes")) (parameter ((name . "text")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "script")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "scriptscript")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "x")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "xx")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "a")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "b")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "c")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "d")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "small")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "big")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "interlinespace")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "em")) (resolve ((name . "style")) ""))))) (command ((name . "setupbodyfontenvironment") (file . "font-ini.tex") (category . "fonts")) (sequence nil (string ((value . "setupbodyfontenvironment")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (inherit ((name . "definebodyfontenvironment") (n . "1")) "")) (keywords ((n . "2") (optional . "no")) (inherit ((name . "definebodyfontenvironment") (n . "2") (optional . "no")) "")) (assignments ((n . "3") (optional . "yes") (list . "yes")) (inherit ((name . "definebodyfontenvironment") (n . "3")) "")))) (command ((name . "showbodyfontenvironment") (file . "font-run.tex") (category . "fonts")) (sequence nil (string ((value . "showbodyfontenvironment")) "")) (arguments nil (keywords ((n . "1") (optional . "yes") (list . "yes")) (inherit ((name . "setupbodyfont") (n . "1")) "")))) (command ((name . "definebodyfont") (file . "font-ini.tex") (category . "fonts")) (sequence nil (string ((value . "definebodyfont")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (resolve ((name . "bodyfont")) "")) (keywords ((n . "2") (optional . "yes")) (constant ((type . "rm") (default . "yes")) "") (constant ((type . "ss")) "") (constant ((type . "tt")) "") (constant ((type . "hw")) "") (constant ((type . "cg")) "") (constant ((type . "mm")) "")) (assignments ((n . "3") (list . "yes")) (parameter ((name . "tf")) (constant ((type . "cd:file")) "")) (parameter ((name . "bf")) (constant ((type . "cd:file")) "")) (parameter ((name . "sl")) (constant ((type . "cd:file")) "")) (parameter ((name . "it")) (constant ((type . "cd:file")) "")) (parameter ((name . "bs")) (constant ((type . "cd:file")) "")) (parameter ((name . "bi")) (constant ((type . "cd:file")) "")) (parameter ((name . "sc")) (constant ((type . "cd:file")) "")) (parameter ((name . "mr")) (constant ((type . "cd:file")) "")) (parameter ((name . "ex")) (constant ((type . "cd:file")) "")) (parameter ((name . "mi")) (constant ((type . "cd:file")) "")) (parameter ((name . "sy")) (constant ((type . "cd:file")) "")) (parameter ((name . "ma")) (constant ((type . "cd:file")) "")) (parameter ((name . "mb")) (constant ((type . "cd:file")) "")) (parameter ((name . "mc")) (constant ((type . "cd:file")) "")) (parameter ((name . "md")) (constant ((type . "cd:file")) ""))))) (command ((name . "definebodyfontDEF") (file . "font-ini.tex") (category . "fonts")) (sequence nil (string ((value . "definebodyfont")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2")) (inherit ((name . "setupbodyfont") (n . "2")) "")) (keywords ((n . "1")) (inherit ((name . "setupbodyfont") (n . "3")) "")))) (command ((name . "definebodyfontREF") (file . "font-ini.tex") (category . "fonts")) (sequence nil (string ((value . "definebodyfont")) "")) (arguments nil (keywords ((n . "1")) (inherit ((name . "setupbodyfont") (n . "1")) "")) (keywords ((n . "2")) (inherit ((name . "setupbodyfont") (n . "2")) "")) (keywords ((n . "3")) (constant ((type . "cd:name")) "")))) (command ((name . "showbodyfont") (file . "font-run.tex") (category . "fonts")) (sequence nil (string ((value . "showbodyfont")) "")) (arguments nil (keywords ((n . "1") (optional . "yes") (list . "yes")) (inherit ((name . "setupbodyfont") (n . "1")) "")))) (command ((name . "setupbodyfont") (file . "font-run.tex") (category . "fonts")) (sequence nil (string ((value . "setupbodyfont")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "cd:name")) "") (constant ((type . "serif")) "") (constant ((type . "regular")) "") (constant ((type . "roman")) "") (constant ((type . "sans")) "") (constant ((type . "support")) "") (constant ((type . "sansserif")) "") (constant ((type . "mono")) "") (constant ((type . "type")) "") (constant ((type . "teletype")) "") (constant ((type . "handwritten")) "") (constant ((type . "calligraphic")) "") (constant ((type . "5pt")) "") (constant ((type . "...")) "") (constant ((type . "12pt")) "")))) (command ((name . "switchtobodyfont") (file . "font-ini.tex") (category . "fonts")) (sequence nil (string ((value . "switchtobodyfont")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "cd:name")) "") (constant ((type . "serif")) "") (constant ((type . "regular")) "") (constant ((type . "roman")) "") (constant ((type . "sans")) "") (constant ((type . "support")) "") (constant ((type . "sansserif")) "") (constant ((type . "mono")) "") (constant ((type . "type")) "") (constant ((type . "teletype")) "") (constant ((type . "handwritten")) "") (constant ((type . "calligraphic")) "") (constant ((type . "5pt")) "") (constant ((type . "...")) "") (constant ((type . "12pt")) "") (constant ((type . "small")) "") (constant ((type . "big")) "")))) (command ((name . "definefont") (file . "font-ini.tex") (category . "fonts")) (sequence nil (string ((value . "definefont")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2")) (constant ((type . "cd:file")) "")) (keywords ((n . "3") (optional . "yes")) (constant ((type . "cd:text")) "")))) (command ((name . "setupcolor") (file . "colo-ini.tex") (category . "colors")) (sequence nil (string ((value . "setupcolor")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")))) (command ((name . "setupcolors") (file . "colo-ini.tex") (category . "colors")) (sequence nil (string ((value . "setupcolors")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "state")) (constant ((type . "start")) "") (constant ((type . "stop")) "") (constant ((type . "global")) "") (constant ((type . "local")) "")) (parameter ((name . "conversion")) (constant ((type . "yes")) "") (constant ((type . "no")) "") (constant ((type . "always")) "") (constant ((type . "never")) "")) (parameter ((name . "reduction")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "rgb")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "cmyk")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "mpcmyk")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "mpspot")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "factor")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "textcolor")) (constant ((type . "cd:name")) "")) (parameter ((name . "split")) (constant ((type . "c")) "") (constant ((type . "m")) "") (constant ((type . "y")) "") (constant ((type . "k")) "") (constant ((type . "p")) "") (constant ((type . "s")) "") (constant ((type . "no")) "") (constant ((type . "cd:name")) "")) (parameter ((name . "criterium")) (constant ((type . "all")) "") (constant ((type . "none")) "")) (parameter ((name . "intent")) (constant ((type . "none")) "") (constant ((type . "overprint")) "") (constant ((type . "knockout")) ""))))) (command ((name . "definecolor") (file . "colo-ini.tex") (category . "colors")) (sequence nil (string ((value . "definecolor")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "r")) (constant ((type . "cd:text")) "")) (parameter ((name . "g")) (constant ((type . "cd:text")) "")) (parameter ((name . "b")) (constant ((type . "cd:text")) "")) (parameter ((name . "c")) (constant ((type . "cd:text")) "")) (parameter ((name . "m")) (constant ((type . "cd:text")) "")) (parameter ((name . "y")) (constant ((type . "cd:text")) "")) (parameter ((name . "k")) (constant ((type . "cd:text")) "")) (parameter ((name . "s")) (constant ((type . "cd:text")) "")) (parameter ((name . "h")) (constant ((type . "cd:text")) "")) (parameter ((name . "t")) (constant ((type . "cd:text")) "")) (parameter ((name . "a")) (constant ((type . "cd:text")) "")) (parameter ((name . "p")) (constant ((type . "cd:text")) "")) (parameter ((name . "e")) (constant ((type . "cd:text")) ""))))) (command ((name . "color") (type . "environment") (file . "colo-ini.tex") (category . "colors")) (sequence nil (string ((value . "color")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")))) (command ((name . "color") (file . "colo-ini.tex")) (sequence nil (string ((value . "color")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:text")) "")) (content ((n . "2")) ""))) (command ((name . "graycolor") (file . "colo-ini.tex") (category . "colors")) (sequence nil (string ((value . "graycolor")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:text")) "")))) (command ((name . "showcolor") (file . "colo-run.tex") (category . "colors")) (sequence nil (string ((value . "showcolor")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")))) (command ((name . "definepalet") (file . "colo-ini.tex") (category . "colors")) (sequence nil (string ((value . "definepalet")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "cd:name")) (constant ((type . "cd:name")) ""))))) (command ((name . "setuppalet") (file . "colo-ini.tex") (category . "colors")) (sequence nil (string ((value . "setuppalet")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")))) (command ((name . "definecolorgroup") (file . "colo-ini.tex") (category . "colors")) (sequence nil (string ((value . "definecolorgroup")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2") (optional . "yes")) (constant ((type . "rgb") (default . "yes")) "") (constant ((type . "cmyk")) "") (constant ((type . "gray")) "") (constant ((type . "s")) "")) (triplet ((n . "3") (list . "yes")) ""))) (command ((name . "showpalet") (file . "colo-run.tex") (category . "colors")) (sequence nil (string ((value . "showpalet")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2") (list . "yes")) (constant ((type . "horizontal")) "") (constant ((type . "vertical")) "") (constant ((type . "name")) "") (constant ((type . "value")) "")))) (command ((name . "showcolorgroup") (file . "colo-run.tex") (category . "colors")) (sequence nil (string ((value . "showcolorgroup")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2") (list . "yes")) (constant ((type . "horizontal")) "") (constant ((type . "vertical")) "") (constant ((type . "name")) "") (constant ((type . "value")) "") (constant ((type . "cd:number")) "")))) (command ((name . "comparepalet") (file . "colo-run.tex") (category . "colors")) (sequence nil (string ((value . "comparepalet")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")))) (command ((name . "comparecolorgroup") (file . "colo-run.tex") (category . "colors")) (sequence nil (string ((value . "comparecolorgroup")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")))) (command ((name . "showmakeup") (file . "supp-vis.tex") (category . "debug")) (sequence nil (string ((value . "showmakeup")) ""))) (command ((name . "definetype") (file . "core-ver.tex") (category . "verbatim")) (sequence nil (string ((value . "definetype")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (inherit ((name . "setuptype") (n . "1")) "")))) (command ((name . "setuptype") (file . "core-ver.tex") (category . "verbatim")) (sequence nil (string ((value . "setuptype")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "space")) (constant ((type . "on")) "") (constant ((type . "off") (default . "yes")) "")) (parameter ((name . "option")) (constant ((type . "slanted")) "") (constant ((type . "normal")) "") (constant ((type . "none")) "")) (parameter ((name . "style")) (resolve ((name . "style")) "")) (parameter ((name . "color")) (constant ((type . "cd:name") (default . " ")) ""))))) (command ((name . "type") (file . "verb-ini.tex") (category . "verbatim")) (sequence nil (string ((value . "type")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "typ") (file . "core-ver.tex") (category . "verbatim")) (sequence nil (string ((value . "typ")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "tex") (file . "core-ver.tex") (category . "verbatim")) (sequence nil (string ((value . "tex")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "definetyping") (file . "core-ver.tex") (category . "verbatim")) (sequence nil (string ((value . "definetyping")) "")) (arguments nil (keywords ((n . "1")) (inherit ((name . "setuptyping") (n . "1")) "")) (assignments ((n . "2") (list . "yes")) (inherit ((name . "setuptyping") (n . "2")) "")))) (command ((name . "setuptyping") (file . "core-ver.tex") (category . "verbatim")) (sequence nil (string ((value . "setuptyping")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "file")) "") (constant ((type . "typing")) "") (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "space")) (constant ((type . "on")) "") (constant ((type . "off")) "")) (parameter ((name . "page")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "option")) (constant ((type . "slanted")) "") (constant ((type . "normal")) "") (constant ((type . "commands") (version . "mkiv")) "") (constant ((type . "color")) "") (constant ((type . "none")) "")) (parameter ((name . "text")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "icommand")) (constant ((type . "cd:command")) "")) (parameter ((name . "vcommand")) (constant ((type . "cd:command")) "")) (parameter ((name . "ccommand")) (constant ((type . "cd:command")) "")) (parameter ((name . "before")) (constant ((type . "cd:command") (default . "\\blank")) "")) (parameter ((name . "after")) (constant ((type . "cd:command") (default . "\\blank")) "")) (parameter ((name . "margin")) (constant ((type . "cd:dimension")) "") (constant ((type . "standard")) "") (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "evenmargin")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "oddmargin")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "blank")) (constant ((type . "cd:dimension")) "") (constant ((type . "small")) "") (constant ((type . "medium")) "") (constant ((type . "big")) "") (constant ((type . "standard")) "") (constant ((type . "halfline")) "") (constant ((type . "line")) "")) (parameter ((name . "escape")) (constant ((type . "cd:text")) "")) (parameter ((name . "space")) (constant ((type . "on")) "") (constant ((type . "off")) "")) (parameter ((name . "tab")) (constant ((type . "cd:number")) "") (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "page")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "indentnext")) (resolve ((name . "indentnext")) "")) (parameter ((name . "style")) (resolve ((name . "style")) "")) (parameter ((name . "color")) (constant ((type . "cd:name")) "")) (parameter ((name . "palet")) (constant ((type . "cd:name")) "")) (parameter ((name . "range")) (constant ((type . "cd:text")) "")) (parameter ((name . "lines")) (constant ((type . "yes")) "") (constant ((type . "no")) "") (constant ((type . "hyphenated")) "")) (parameter ((name . "empty")) (constant ((type . "yes")) "") (constant ((type . "all")) "") (constant ((type . "no")) "")) (parameter ((name . "numbering")) (constant ((type . "line")) "") (constant ((type . "file")) "") (constant ((type . "no")) "")) (parameter ((name . "bodyfont")) (resolve ((name . "bodyfont")) "")) (parameter ((name . "strip")) (constant ((type . "no")) "") (constant ((type . "auto")) "") (constant ((type . "cd:number")) ""))))) (command ((name . "typing") (type . "environment") (generated . "yes") (file . "verb-ini.tex") (category . "verbatim")) (sequence nil (variable ((value . "typing")) ""))) (command ((name . "typefile") (file . "verb-ini.tex") (category . "verbatim")) (sequence nil (string ((value . "typefile")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "cd:name")) "")) (content ((n . "2")) ""))) (command ((name . "setupfootnotes") (file . "core-not.tex") (category . "footnotes")) (sequence nil (string ((value . "setupfootnotes")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "conversion")) (constant ((type . "numbers")) "") (constant ((type . "characters")) "") (constant ((type . "Characters")) "") (constant ((type . "romannumerals")) "") (constant ((type . "Romannumerals")) "")) (parameter ((name . "way")) (constant ((type . "bytext")) "") (constant ((type . "bycd:section")) "")) (parameter ((name . "location")) (constant ((type . "page")) "") (constant ((type . "cd:text")) "") (constant ((type . "columns")) "") (constant ((type . "firstcolumn")) "") (constant ((type . "lastcolumn")) "") (constant ((type . "high")) "") (constant ((type . "none")) "")) (parameter ((name . "rule")) (constant ((type . "on")) "") (constant ((type . "off")) "")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) "")) (parameter ((name . "width")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "height")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "bodyfont")) (resolve ((name . "bodyfont")) "")) (parameter ((name . "style")) (resolve ((name . "style")) "")) (parameter ((name . "distance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "columndistance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "margindistance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "n")) (constant ((type . "cd:number")) "")) (parameter ((name . "numbercommand")) (constant ((type . "cd:oneargument")) "")) (parameter ((name . "textcommand")) (constant ((type . "cd:oneargument")) "")) (parameter ((name . "split")) (constant ((type . "tolerant")) "") (constant ((type . "strict")) "") (constant ((type . "verystrict")) "") (constant ((type . "cd:number")) "")) (parameter ((name . "textstyle")) (resolve ((name . "style")) "")) (parameter ((name . "textcolor")) (constant ((type . "cd:name")) "")) (parameter ((name . "interaction")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "paragraph")) (constant ((type . "yes")) "") (constant ((type . "no") (default . "yes")) "")) (parameter ((name . "factor")) (constant ((type . "cd:number")) "")) (inherit ((name . "setupframed") (n . "2")) "")))) (command ((name . "setupfootnotedefinition") (file . "core-not.tex") (category . "footnotes")) (sequence nil (string ((value . "setupfootnotedefinition")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (inherit ((name . "setupdescriptions") (n . "2")) "")))) (command ((name . "footnote") (file . "core-not.tex") (category . "footnotes")) (sequence nil (string ((value . "footnote")) "")) (arguments nil (reference ((n . "1") (optional . "yes")) "") (content ((n . "2")) ""))) (command ((name . "footnotetext") (file . "core-not.tex") (category . "footnotes")) (sequence nil (string ((value . "footnotetext")) "")) (arguments nil (reference ((n . "1") (optional . "yes")) "") (content ((n . "2")) ""))) (command ((name . "note") (file . "core-not.tex") (category . "footnotes")) (sequence nil (string ((value . "note")) "")) (arguments nil (reference ((n . "1") (interactive . "yes")) ""))) (command ((name . "localfootnotes") (type . "environment") (file . "core-not.tex") (category . "footnotes")) (sequence nil (string ((value . "localfootnotes")) ""))) (command ((name . "placelocalfootnotes") (file . "core-not.tex") (category . "footnotes")) (sequence nil (string ((value . "placelocalfootnotes")) "")) (arguments nil (assignments ((n . "1") (optional . "yes") (list . "yes")) (inherit ((name . "setupfootnotes") (n . "1")) "")))) (command ((name . "placefootnotes") (file . "core-not.tex") (category . "footnotes")) (sequence nil (string ((value . "placefootnotes")) "")) (arguments nil (assignments ((n . "1") (optional . "yes") (list . "yes")) (inherit ((name . "setupfootnotes") (n . "1")) "")))) (command ((name . "setupunderbar") (file . "core-fnt.tex")) (sequence nil (string ((value . "setupunderbar")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "alternative")) (constant ((type . "a")) "") (constant ((type . "b")) "") (constant ((type . "c")) "")) (parameter ((name . "rulethickness")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "bottomoffset")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "topoffset")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "rulecolor")) (constant ((type . "cd:name")) ""))))) (command ((name . "underbar") (file . "core-fnt.tex")) (sequence nil (string ((value . "underbar")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "underbars") (file . "core-fnt.tex")) (sequence nil (string ((value . "underbars")) "")) (arguments nil (word ((n . "1") (list . "yes")) ""))) (command ((name . "overbar") (file . "core-fnt.tex")) (sequence nil (string ((value . "overbar")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "overbars") (file . "core-fnt.tex")) (sequence nil (string ((value . "overbars")) "")) (arguments nil (word ((n . "1") (list . "yes")) ""))) (command ((name . "overstrike") (file . "core-fnt.tex")) (sequence nil (string ((value . "overstrike")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "overstrikes") (file . "core-fnt.tex")) (sequence nil (string ((value . "overstrikes")) "")) (arguments nil (word ((n . "1") (list . "yes")) ""))) (command ((name . "romannumerals") (file . "core-con.tex")) (sequence nil (string ((value . "romannumerals")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "Romannumerals") (file . "core-con.tex")) (sequence nil (string ((value . "Romannumerals")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "numbers") (file . "core-con.tex")) (sequence nil (string ((value . "numbers")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "character") (file . "core-con.tex")) (sequence nil (string ((value . "character")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "Character") (file . "core-con.tex")) (sequence nil (string ((value . "Character")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "characters") (file . "core-con.tex")) (sequence nil (string ((value . "characters")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "Characters") (file . "core-con.tex")) (sequence nil (string ((value . "Characters")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "mediaeval") (file . "core-con.tex")) (sequence nil (string ((value . "mediaeval")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "month") (file . "core-con.tex")) (sequence nil (string ((value . "month")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "MONTH") (file . "core-con.tex")) (sequence nil (string ((value . "MONTH")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "weekday") (file . "core-con.tex")) (sequence nil (string ((value . "weekday")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "WEEKDAY") (file . "core-con.tex")) (sequence nil (string ((value . "WEEKDAY")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "setupcapitals") (file . "core-fnt.tex") (category . "Fonts")) (sequence nil (string ((value . "setupcapitals")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "title")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "sc")) (constant ((type . "yes")) "") (constant ((type . "no")) ""))))) (command ((name . "cap") (file . "core-fnt.tex") (category . "Fonts")) (sequence nil (string ((value . "cap")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "nocap") (file . "core-fnt.tex") (category . "Fonts")) (sequence nil (string ((value . "nocap")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "CAP") (file . "core-fnt.tex") (category . "Fonts")) (sequence nil (string ((value . "CAP")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "Cap") (file . "core-fnt.tex") (category . "Fonts")) (sequence nil (string ((value . "Cap")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "Caps") (file . "core-fnt.tex") (category . "Fonts")) (sequence nil (string ((value . "Caps")) "")) (arguments nil (word ((n . "1") (list . "yes")) ""))) (command ((name . "WORD") (file . "core-fnt.tex") (category . "Fonts")) (sequence nil (string ((value . "WORD")) "")) (arguments nil (word ((n . "1")) ""))) (command ((name . "WORDS") (file . "core-fnt.tex") (category . "Fonts")) (sequence nil (string ((value . "WORDS")) "")) (arguments nil (word ((n . "1") (list . "yes")) ""))) (command ((name . "Word") (file . "core-fnt.tex") (category . "Fonts")) (sequence nil (string ((value . "Word")) "")) (arguments nil (word ((n . "1")) ""))) (command ((name . "Words") (file . "core-fnt.tex") (category . "Fonts")) (sequence nil (string ((value . "Words")) "")) (arguments nil (word ((n . "1") (list . "yes")) ""))) (command ((name . "stretched") (file . "core-fnt.tex")) (sequence nil (string ((value . "stretched")) "")) (arguments nil (word ((n . "1")) ""))) (command ((name . "definesymbol") (file . "symb-ini.tex")) (sequence nil (string ((value . "definesymbol")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2")) (constant ((type . "cd:text")) "")))) (command ((name . "definefiguresymbol") (file . "symb-ini.tex")) (sequence nil (string ((value . "definefiguresymbol")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2")) (constant ((type . "cd:text")) "")) (assignments ((n . "3") (optional . "yes") (list . "yes")) (inherit ((name . "setupexternalfigures") (n . "1")) "")))) (command ((name . "symbol") (file . "symb-ini.tex")) (sequence nil (string ((value . "symbol")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "cd:name")) "")) (keywords ((n . "2")) (constant ((type . "cd:name")) "")))) (command ((name . "symbolset") (type . "environment") (file . "symb-ini.tex") (category . "symbols")) (sequence nil (string ((value . "symbolset")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")))) (command ((name . "setupsymbolset") (file . "symb-ini.tex") (category . "symbols")) (sequence nil (string ((value . "setupsymbolset")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")))) (command ((name . "usesymbols") (file . "symb-ini.tex") (category . "symbols")) (sequence nil (string ((value . "usesymbols")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")))) (command ((name . "showsymbolset") (file . "symb-run.tex") (category . "symbols")) (sequence nil (string ((value . "showsymbolset")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")))) (command ((name . "defineconversion") (file . "core-con.tex")) (sequence nil (string ((value . "defineconversion")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2")) (constant ((type . "cd:command")) "") (constant ((type . "cd:text")) "")))) (command ((name . "convertnumber") (file . "core-con.tex")) (sequence nil (string ((value . "convertnumber")) "")) (arguments nil (content ((n . "1")) "") (content ((n . "2")) ""))) (command ((name . "setupheadtext") (file . "lang-lab.tex")) (sequence nil (string ((value . "setupheadtext")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (resolve ((name . "language")) "")) (assignments ((n . "2")) (parameter ((name . "cd:name")) (constant ((type . "cd:text")) ""))))) (command ((name . "setuplabeltext") (file . "lang-lab.tex")) (sequence nil (string ((value . "setuplabeltext")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (resolve ((name . "language")) "")) (assignments ((n . "2")) (parameter ((name . "cd:name")) (constant ((type . "cd:text")) ""))))) (command ((name . "headtext") (file . "lang-lab.tex")) (sequence nil (string ((value . "headtext")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "labeltext") (file . "lang-lab.tex")) (sequence nil (string ((value . "labeltext")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "setupmarginrules") (file . "core-rul.tex")) (sequence nil (string ((value . "setupmarginrules")) "")) (arguments nil (assignments ((n . "1")) (parameter ((name . "level")) (constant ((type . "cd:number")) "")) (parameter ((name . "rulethickness")) (constant ((type . "cd:dimension")) ""))))) (command ((name . "marginrule") (type . "environment") (file . "core-rul.tex")) (sequence nil (string ((value . "marginrule")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:number")) "")))) (command ((name . "marginrule") (file . "core-rul.tex")) (sequence nil (string ((value . "marginrule")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:number")) "")) (content ((n . "2")) ""))) (command ((name . "setuplinewidth") (file . "core-rul.tex")) (sequence nil (string ((value . "setuplinewidth")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:dimension")) "")))) (command ((name . "setupframed") (file . "core-rul.tex")) (sequence nil (string ((value . "setupframed")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "height")) (constant ((type . "fit")) "") (constant ((type . "broad")) "") (constant ((type . "cd:dimension")) "")) (parameter ((name . "width")) (constant ((type . "fit")) "") (constant ((type . "broad")) "") (constant ((type . "fixed")) "") (constant ((type . "local")) "") (constant ((type . "cd:dimension")) "")) (parameter ((name . "autowidth")) (constant ((type . "yes")) "") (constant ((type . "no")) "") (constant ((type . "force")) "")) (parameter ((name . "offset")) (constant ((type . "none")) "") (constant ((type . "overlay")) "") (constant ((type . "default")) "") (constant ((type . "cd:dimension")) "")) (parameter ((name . "location")) (constant ((type . "depth")) "") (constant ((type . "hanging")) "") (constant ((type . "high")) "") (constant ((type . "lohi")) "") (constant ((type . "low")) "") (constant ((type . "top")) "") (constant ((type . "middle")) "") (constant ((type . "bottom")) "") (constant ((type . "keep")) "")) (parameter ((name . "option")) (constant ((type . "none")) "") (constant ((type . "empty")) "")) (parameter ((name . "strut")) (constant ((type . "yes")) "") (constant ((type . "no")) "") (constant ((type . "global")) "") (constant ((type . "local")) "")) (parameter ((name . "align")) (resolve ((name . "align")) "")) (parameter ((name . "bottom")) (constant ((type . "cd:command")) "")) (parameter ((name . "top")) (constant ((type . "cd:command")) "")) (parameter ((name . "frame")) (constant ((type . "on")) "") (constant ((type . "off")) "") (constant ((type . "none")) "") (constant ((type . "overlay")) "")) (parameter ((name . "topframe")) (constant ((type . "on")) "") (constant ((type . "off")) "")) (parameter ((name . "bottomframe")) (constant ((type . "on")) "") (constant ((type . "off")) "")) (parameter ((name . "leftframe")) (constant ((type . "on")) "") (constant ((type . "off")) "")) (parameter ((name . "rightframe")) (constant ((type . "on")) "") (constant ((type . "off")) "")) (parameter ((name . "frameoffset")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "framedepth")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "framecorner")) (constant ((type . "round")) "") (constant ((type . "rectangular")) "")) (parameter ((name . "frameradius")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "framecolor")) (constant ((type . "cd:name")) "")) (parameter ((name . "background")) (constant ((type . "screen")) "") (constant ((type . "color")) "") (constant ((type . "none")) "") (constant ((type . "foreground")) "") (constant ((type . "cd:name")) "")) (parameter ((name . "backgroundscreen")) (constant ((type . "cd:number")) "")) (parameter ((name . "backgroundcolor")) (constant ((type . "cd:name")) "")) (parameter ((name . "backgroundoffset")) (constant ((type . "frame")) "") (constant ((type . "cd:dimension")) "")) (parameter ((name . "backgrounddepth")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "backgroundcorner")) (constant ((type . "round")) "") (constant ((type . "rectangular")) "")) (parameter ((name . "backgroundradius")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "depth")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "corner")) (constant ((type . "round")) "") (constant ((type . "rectangular")) "")) (parameter ((name . "radius")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "empty")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "foregroundcolor")) (constant ((type . "cd:name")) "")) (parameter ((name . "foregroundstyle")) (resolve ((name . "style")) "")) (parameter ((name . "rulethickness")) (constant ((type . "cd:dimension")) ""))))) (command ((name . "framed") (file . "core-rul.tex")) (sequence nil (string ((value . "framed")) "")) (arguments nil (assignments ((n . "1") (optional . "yes") (list . "yes")) (inherit ((name . "setupframed") (n . "2")) "")) (content ((n . "2")) ""))) (command ((name . "inframed") (file . "core-rul.tex")) (sequence nil (string ((value . "inframed")) "")) (arguments nil (assignments ((n . "1") (optional . "yes") (list . "yes")) (inherit ((name . "setupframed") (n . "2")) "")) (content ((n . "2")) ""))) (command ((name . "thinrules") (file . "core-rul.tex")) (sequence nil (string ((value . "thinrules")) "")) (arguments nil (assignments ((n . "1") (optional . "yes")) (inherit ((name . "setupthinrules") (n . "1")) "")))) (command ((name . "setupthinrules") (file . "core-rul.tex")) (sequence nil (string ((value . "setupthinrules")) "")) (arguments nil (assignments ((n . "1")) (parameter ((name . "interlinespace")) (constant ((type . "small")) "") (constant ((type . "medium")) "") (constant ((type . "big")) "")) (parameter ((name . "n")) (constant ((type . "cd:number")) "")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "inbetween")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) "")) (parameter ((name . "color")) (constant ((type . "cd:name")) "")) (parameter ((name . "backgroundcolor")) (constant ((type . "cd:name")) "")) (parameter ((name . "height")) (constant ((type . "cd:dimension")) "") (constant ((type . "max")) "")) (parameter ((name . "depth")) (constant ((type . "cd:dimension")) "") (constant ((type . "max")) "")) (parameter ((name . "alternative")) (constant ((type . "a")) "") (constant ((type . "b")) "") (constant ((type . "c")) "") (constant ((type . "d")) "")) (parameter ((name . "rulethickness")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "color")) (constant ((type . "cd:name")) "")) (parameter ((name . "background")) (constant ((type . "color")) "")) (parameter ((name . "backgroundcolor")) (constant ((type . "cd:name")) ""))))) (command ((name . "hairline") (file . "core-rul.tex")) (sequence nil (string ((value . "hairline")) ""))) (command ((name . "thinrule") (file . "core-rul.tex")) (sequence nil (string ((value . "thinrule")) ""))) (command ((name . "defineframedtext") (file . "core-rul.tex")) (sequence nil (string ((value . "defineframedtext")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (optional . "yes") (list . "yes")) (inherit ((name . "setupframedtexts") (n . "2")) "")))) (command ((name . "defineframed") (file . "core-rul.tex")) (sequence nil (string ((value . "defineframed")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (optional . "yes") (list . "yes")) (inherit ((name . "setupframedtexts") (n . "2")) "")))) (command ((name . "setupframedtexts") (file . "core-rul.tex")) (sequence nil (string ((value . "setupframedtexts")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "bodyfont")) (resolve ((name . "bodyfont")) "")) (parameter ((name . "style")) (resolve ((name . "style")) "")) (parameter ((name . "left")) (constant ((type . "cd:command")) "")) (parameter ((name . "right")) (constant ((type . "cd:command")) "")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) "")) (parameter ((name . "inner")) (constant ((type . "cd:command")) "")) (parameter ((name . "linecorrection")) (constant ((type . "on")) "") (constant ((type . "off")) "")) (parameter ((name . "depthcorrection")) (constant ((type . "on")) "") (constant ((type . "off")) "")) (parameter ((name . "margin")) (constant ((type . "standard")) "") (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "location")) (constant ((type . "left")) "") (constant ((type . "right")) "") (constant ((type . "middle")) "") (constant ((type . "none")) "")) (parameter ((name . "indenting")) (resolve ((name . "indenting")) "")) (inherit ((name . "setupframed") (n . "2")) "")))) (command ((name . "framedtext") (type . "environment") (generated . "yes") (file . "core-rul.tex")) (sequence nil (variable ((value . "framedtext")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "left")) "") (constant ((type . "right")) "") (constant ((type . "middle")) "") (constant ((type . "none")) "")) (assignments ((n . "2") (optional . "yes") (list . "yes")) (inherit ((name . "setupframedtexts") (n . "2")) "")))) (command ((name . "framedtext") (generated . "yes") (file . "core-rul.tex")) (sequence nil (variable ((value . "framedtext")) "")) (arguments nil (assignments ((n . "1") (optional . "yes") (list . "yes")) (inherit ((name . "setupframedtexts") (n . "2")) "")))) (command ((name . "background") (type . "environment") (file . "core-rul.tex")) (sequence nil (string ((value . "background")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "background") (file . "core-rul.tex")) (sequence nil (string ((value . "background")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "setupbackground") (file . "core-rul.tex")) (sequence nil (string ((value . "setupbackground")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "leftoffset")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "rightoffset")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "topoffset")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "bottomoffset")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) "")) (parameter ((name . "state")) (constant ((type . "start")) "") (constant ((type . "stop")) "")) (inherit ((name . "setupframed") (n . "2")) "")))) (command ((name . "fillinrules") (file . "core-rul.tex")) (sequence nil (string ((value . "fillinrules")) "")) (arguments nil (assignments ((n . "1") (optional . "yes") (list . "yes")) (inherit ((name . "setupfillinrules") (n . "1")) "")) (content ((n . "2")) "") (content ((n . "3") (optional . "yes")) ""))) (command ((name . "fillintext") (file . "core-rul.tex")) (sequence nil (string ((value . "fillintext")) "")) (arguments nil (assignments ((n . "1") (optional . "yes") (list . "yes")) (inherit ((name . "setupfillinrules") (n . "1")) "")) (content ((n . "2")) "") (content ((n . "3") (optional . "yes")) ""))) (command ((name . "setupfillinrules") (file . "core-rul.tex")) (sequence nil (string ((value . "setupfillinrules")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "width")) (constant ((type . "fit")) "") (constant ((type . "broad")) "") (constant ((type . "cd:dimension")) "")) (parameter ((name . "distance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) "")) (parameter ((name . "style")) (resolve ((name . "style")) "")) (parameter ((name . "n")) (constant ((type . "cd:number")) "")) (parameter ((name . "interlinespace")) (constant ((type . "small")) "") (constant ((type . "medium")) "") (constant ((type . "big")) "")) (parameter ((name . "separator")) (constant ((type . "cd:text")) ""))))) (command ((name . "fillinline") (file . "core-rul.tex")) (sequence nil (string ((value . "fillinline")) "")) (arguments nil (assignments ((n . "1") (optional . "yes") (list . "yes")) (inherit ((name . "setupfillinlines") (n . "1")) "")) (nothing ((n . "2")) ""))) (command ((name . "setupfillinlines") (file . "core-rul.tex")) (sequence nil (string ((value . "setupfillinlines")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "width")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "margin")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "distance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) ""))))) (command ((name . "setuptextrules") (file . "core-rul.tex")) (sequence nil (string ((value . "setuptextrules")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "location")) (constant ((type . "left")) "") (constant ((type . "inmargin")) "")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) "")) (parameter ((name . "inbetween")) (constant ((type . "cd:command")) "")) (parameter ((name . "width")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "distance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "bodyfont")) (resolve ((name . "bodyfont")) "")) (parameter ((name . "color")) (constant ((type . "cd:name")) "")) (parameter ((name . "style")) (resolve ((name . "style")) "")) (parameter ((name . "rulecolor")) (constant ((type . "cd:name")) ""))))) (command ((name . "textrule") (file . "core-rul.tex")) (sequence nil (string ((value . "textrule")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "top")) "") (constant ((type . "bottom")) "")) (content ((n . "2") (optional . "yes")) ""))) (command ((name . "textrule") (type . "environment") (file . "core-rul.tex")) (sequence nil (string ((value . "textrule")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "top")) "") (constant ((type . "bottom")) "")) (content ((n . "2") (optional . "yes")) ""))) (command ((name . "blackrule") (file . "core-rul.tex")) (sequence nil (string ((value . "blackrule")) "")) (arguments nil (assignments ((n . "1") (optional . "yes") (list . "yes")) (inherit ((name . "setupblackrules") (n . "1")) "")))) (command ((name . "blackrules") (file . "core-rul.tex")) (sequence nil (string ((value . "blackrules")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (inherit ((name . "setupblackrules") (n . "1")) "")))) (command ((name . "setupblackrules") (file . "core-rul.tex")) (sequence nil (string ((value . "setupblackrules")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "width")) (constant ((type . "cd:dimension") (default . "1em")) "") (constant ((type . "max")) "")) (parameter ((name . "height")) (constant ((type . "cd:dimension") (default . "1ex")) "") (constant ((type . "max")) "")) (parameter ((name . "depth")) (constant ((type . "cd:dimension")) "") (constant ((type . "max")) "")) (parameter ((name . "alternative")) (constant ((type . "a") (default . "yes")) "") (constant ((type . "b")) "")) (parameter ((name . "distance")) (constant ((type . "cd:dimension") (default . ".25ex")) "")) (parameter ((name . "n")) (constant ((type . "cd:number") (default . "3")) "")) (parameter ((name . "color")) (constant ((type . "cd:name") (default . " ")) ""))))) (command ((name . "defineoverlay") (file . "core-rul.tex")) (sequence nil (string ((value . "defineoverlay")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "cd:name")) "")) (keywords ((n . "2")) (constant ((type . "cd:command")) "")))) (command ((name . "usemodule") (file . "core-fil.tex")) (sequence nil (string ((value . "usemodule")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "cd:name")) "")))) (command ((name . "reset") (file . "core-num.tex")) (sequence nil (string ((value . "reset")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "cd:name")) "")))) (command ((name . "localenvironment") (type . "environment") (file . "core-job.tex")) (sequence nil (string ((value . "localenvironment")) ""))) (command ((name . "setupsystem") (file . "core-sys.tex")) (sequence nil (string ((value . "setupsystem")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "resolution")) (constant ((type . "cd:number")) "")) (parameter ((name . "file")) (constant ((type . "cd:text")) "")) (parameter ((name . "directory")) (constant ((type . "cd:text")) "")) (parameter ((name . "random")) (constant ((type . "normal")) "") (constant ((type . "small")) "") (constant ((type . "medium")) "") (constant ((type . "big")) "") (constant ((type . "cd:number")) ""))))) (command ((name . "usedirectory") (file . "core-job.mkii")) (sequence nil (string ((value . "usedirectory")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "cd:name")) "") (constant ((type . "reset")) "")))) (command ((name . "low") (file . "core-fnt.tex")) (sequence nil (string ((value . "low")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "high") (file . "core-fnt.tex")) (sequence nil (string ((value . "high")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "lohi") (file . "core-fnt.tex")) (sequence nil (string ((value . "lohi")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "low")) "")) (content ((n . "2")) "") (content ((n . "3")) ""))) (command ((name . "showframe") (file . "page-run.tex")) (sequence nil (string ((value . "showframe")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "cd:text")) "") (constant ((type . "margin")) "") (constant ((type . "edge")) "")))) (command ((name . "leftaligned") (file . "core-spa.tex")) (sequence nil (string ((value . "leftaligned")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "rightaligned") (file . "core-spa.tex")) (sequence nil (string ((value . "rightaligned")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "midaligned") (file . "core-spa.tex")) (sequence nil (string ((value . "midaligned")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "wordright") (file . "core-spa.tex")) (sequence nil (string ((value . "wordright")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "inmargin") (file . "core-sec.tex")) (sequence nil (string ((value . "inmargin")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "+")) "") (constant ((type . "-")) "") (constant ((type . "low")) "")) (reference ((n . "2") (optional . "yes")) "") (content ((n . "3")) ""))) (command ((name . "inothermargin") (file . "page-mar.tex")) (sequence nil (string ((value . "inothermargin")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "+")) "") (constant ((type . "-")) "") (constant ((type . "low")) "")) (reference ((n . "2") (optional . "yes")) "") (content ((n . "3")) ""))) (command ((name . "inleft") (file . "page-mar.tex")) (sequence nil (string ((value . "inleft")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "+")) "") (constant ((type . "-")) "") (constant ((type . "low")) "")) (reference ((n . "2") (optional . "yes")) "") (content ((n . "3")) ""))) (command ((name . "inright") (file . "page-mar.tex")) (sequence nil (string ((value . "inright")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "+")) "") (constant ((type . "-")) "") (constant ((type . "low")) "")) (reference ((n . "2") (optional . "yes")) "") (content ((n . "3")) ""))) (command ((name . "ininner") (file . "page-mar.tex")) (sequence nil (string ((value . "ininner")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "+")) "") (constant ((type . "-")) "") (constant ((type . "low")) "")) (reference ((n . "2") (optional . "yes")) "") (content ((n . "3")) ""))) (command ((name . "inouter") (file . "page-mar.tex")) (sequence nil (string ((value . "inouter")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "+")) "") (constant ((type . "-")) "") (constant ((type . "low")) "")) (reference ((n . "2") (optional . "yes")) "") (content ((n . "3")) ""))) (command ((name . "column") (file . "page-ini.tex")) (sequence nil (string ((value . "column")) ""))) (command ((name . "showstruts") (file . "core-spa.tex")) (sequence nil (string ((value . "showstruts")) ""))) (command ((name . "showsetups") (file . "page-run.tex")) (sequence nil (string ((value . "showsetups")) ""))) (command ((name . "showlayout") (file . "page-run.tex")) (sequence nil (string ((value . "showlayout")) ""))) (command ((name . "margintext") (file . "page-mar.tex")) (sequence nil (string ((value . "margintext")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "+")) "") (constant ((type . "-")) "") (constant ((type . "low")) "")) (reference ((n . "2") (optional . "yes")) "") (content ((n . "3")) ""))) (command ((name . "setupmarginblocks") (file . "page-flt.tex")) (sequence nil (string ((value . "setupmarginblocks")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "location")) (constant ((type . "inmargin")) "") (constant ((type . "left")) "") (constant ((type . "middle")) "") (constant ((type . "right")) "")) (parameter ((name . "style")) (resolve ((name . "style")) "")) (parameter ((name . "width")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "align")) (resolve ((name . "align")) "")) (parameter ((name . "top")) (constant ((type . "cd:command")) "")) (parameter ((name . "inbetween")) (constant ((type . "cd:command")) "")) (parameter ((name . "bottom")) (constant ((type . "cd:command")) "")) (parameter ((name . "left")) (constant ((type . "cd:command")) "")) (parameter ((name . "right")) (constant ((type . "cd:command")) "")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) ""))))) (command ((name . "marginblock") (type . "environment") (file . "page-flt.tex")) (sequence nil (string ((value . "marginblock")) ""))) (command ((name . "part") (file . "core-sec.tex")) (sequence nil (string ((value . "part")) "")) (arguments nil (reference ((n . "1") (optional . "yes") (list . "yes")) "") (content ((n . "2")) ""))) (command ((name . "title") (file . "core-sec.tex")) (sequence nil (string ((value . "title")) "")) (arguments nil (reference ((n . "1") (optional . "yes") (list . "yes")) "") (content ((n . "2")) ""))) (command ((name . "chapter") (file . "core-sec.tex")) (sequence nil (string ((value . "chapter")) "")) (arguments nil (reference ((n . "1") (optional . "yes") (list . "yes")) "") (content ((n . "2")) ""))) (command ((name . "section") (file . "core-sec.tex")) (sequence nil (string ((value . "section")) "")) (arguments nil (reference ((n . "1") (optional . "yes") (list . "yes")) "") (content ((n . "2")) ""))) (command ((name . "subsection") (file . "core-sec.tex")) (sequence nil (string ((value . "subsection")) "")) (arguments nil (reference ((n . "1") (optional . "yes") (list . "yes")) "") (content ((n . "2")) ""))) (command ((name . "subsubsection") (file . "core-sec.tex")) (sequence nil (string ((value . "subsubsection")) "")) (arguments nil (reference ((n . "1") (optional . "yes") (list . "yes")) "") (content ((n . "2")) ""))) (command ((name . "subject") (file . "core-sec.tex")) (sequence nil (string ((value . "subject")) "")) (arguments nil (reference ((n . "1") (optional . "yes") (list . "yes")) "") (content ((n . "2")) ""))) (command ((name . "subsubject") (file . "core-sec.tex")) (sequence nil (string ((value . "subsubject")) "")) (arguments nil (reference ((n . "1") (optional . "yes") (list . "yes")) "") (content ((n . "2")) ""))) (command ((name . "subsubsubject") (file . "core-sec.tex")) (sequence nil (string ((value . "subsubsubject")) "")) (arguments nil (reference ((n . "1") (optional . "yes") (list . "yes")) "") (content ((n . "2")) ""))) (command ((name . "appendix") (file . "core-sec.tex")) (sequence nil (string ((value . "appendix")) "")) (arguments nil (reference ((n . "1") (optional . "yes") (list . "yes")) "") (content ((n . "2")) ""))) (command ((name . "in") (file . "core-ref.tex") (category . "references")) (sequence nil (string ((value . "in")) "")) (arguments nil (content ((n . "1") (interactive . "yes")) "") (content ((n . "2") (interactive . "yes")) "") (reference ((n . "3")) ""))) (command ((name . "at") (file . "core-ref.tex") (category . "references")) (sequence nil (string ((value . "at")) "")) (arguments nil (content ((n . "1") (interactive . "yes")) "") (content ((n . "2") (interactive . "yes")) "") (reference ((n . "3")) ""))) (command ((name . "about") (file . "core-ref.tex") (category . "references")) (sequence nil (string ((value . "about")) "")) (arguments nil (content ((n . "1") (interactive . "yes")) "") (reference ((n . "2")) ""))) (command ((name . "somewhere") (file . "core-ref.tex") (category . "references")) (sequence nil (string ((value . "somewhere")) "")) (arguments nil (content ((n . "1")) "") (content ((n . "2")) "") (reference ((n . "3")) ""))) (command ((name . "atpage") (file . "core-ref.tex") (category . "references")) (sequence nil (string ((value . "atpage")) "")) (arguments nil (reference ((n . "1")) ""))) (command ((name . "ref") (file . "core-ref.tex") (category . "references")) (sequence nil (string ((value . "ref")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "t")) "") (constant ((type . "p")) "") (constant ((type . "r")) "") (constant ((type . "s")) "") (constant ((type . "e")) "")) (reference ((n . "2")) ""))) (command ((name . "textreference") (file . "core-ref.tex") (category . "references")) (sequence nil (string ((value . "textreference")) "")) (arguments nil (reference ((n . "1")) "") (content ((n . "2")) ""))) (command ((name . "pagereference") (file . "core-ref.tex") (category . "references")) (sequence nil (string ((value . "pagereference")) "")) (arguments nil (reference ((n . "1")) ""))) (command ((name . "reference") (file . "core-ref.tex") (category . "references")) (sequence nil (string ((value . "reference")) "")) (arguments nil (reference ((n . "1")) "") (content ((n . "2")) ""))) (command ((name . "usereferences") (file . "core-ref.tex") (category . "references")) (sequence nil (string ((value . "usereferences")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "cd:file")) "")))) (command ((name . "definereference") (file . "core-ref.tex") (category . "references")) (sequence nil (string ((value . "definereference")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (reference ((n . "2") (list . "yes")) ""))) (command ((name . "definereferenceformat") (file . "core-ref.tex") (category . "references")) (sequence nil (string ((value . "definereferenceformat")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "left")) (constant ((type . "cd:text")) "")) (parameter ((name . "right")) (constant ((type . "cd:text")) "")) (parameter ((name . "text")) (constant ((type . "cd:text")) "")) (parameter ((name . "label")) (constant ((type . "cd:name")) ""))))) (command ((name . "hl") (file . "core-rul.tex")) (sequence nil (string ((value . "hl")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:number")) "")))) (command ((name . "vl") (file . "core-rul.tex")) (sequence nil (string ((value . "vl")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:number")) "")))) (command ((name . "godown") (file . "core-spa.tex")) (sequence nil (string ((value . "godown")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:dimension")) "")))) (command ((name . "whitespace") (file . "core-spa.tex")) (sequence nil (string ((value . "whitespace")) ""))) (command ((name . "nowhitespace") (file . "core-spa.tex")) (sequence nil (string ((value . "nowhitespace")) ""))) (command ((name . "crlf") (file . "core-spa.tex")) (sequence nil (string ((value . "crlf")) ""))) (command ((name . "space") (file . "syst-pln.tex")) (sequence nil (string ((value . "space")) ""))) (command ((name . "fixedspaces") (file . "core-spa.tex")) (sequence nil (string ((value . "fixedspaces")) ""))) (command ((name . "emptylines") (file . "page-lin.tex")) (sequence nil (string ((value . "emptylines")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:number")) "")))) (command ((name . "nospace") (file . "core-spa.tex")) (sequence nil (string ((value . "nospace")) ""))) (command ((name . "packed") (file . "core-spa.tex")) (sequence nil (string ((value . "packed")) ""))) (command ((name . "setupdescriptions") (file . "core-des.tex")) (sequence nil (string ((value . "setupdescriptions")) "")) (arguments nil (keywords ((n . "1") (optional . "yes") (list . "yes")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "style")) (resolve ((name . "style")) "")) (parameter ((name . "color")) (constant ((type . "cd:name") (default . " ")) "")) (parameter ((name . "width")) (constant ((type . "fit")) "") (constant ((type . "broad")) "") (constant ((type . "cd:dimension") (default . "8em")) "")) (parameter ((name . "distance")) (constant ((type . "cd:dimension") (default . "0pt")) "")) (parameter ((name . "sample")) (constant ((type . "cd:text") (default . " ")) "")) (parameter ((name . "text")) (constant ((type . "cd:text")) "")) (parameter ((name . "closesymbol")) (constant ((type . "cd:text")) "")) (parameter ((name . "closecommand")) (constant ((type . "cd:oneargument")) "")) (parameter ((name . "closesymbol")) (constant ((type . "cd:text") (default . " ")) "")) (parameter ((name . "titleleft")) (constant ((type . "cd:text") (default . "(")) "")) (parameter ((name . "titleright")) (constant ((type . "cd:text") (default . ")")) "")) (parameter ((name . "titledistance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "titlestyle")) (resolve ((name . "style")) "")) (parameter ((name . "titlecolor")) (constant ((type . "cd:name") (default . " ")) "")) (parameter ((name . "align")) (resolve ((name . "align")) "")) (parameter ((name . "margin")) (constant ((type . "standard")) "") (constant ((type . "yes")) "") (constant ((type . "no") (default . "yes")) "") (constant ((type . "cd:dimension")) "")) (parameter ((name . "location")) (constant ((type . "left") (default . "yes")) "") (constant ((type . "right")) "") (constant ((type . "top")) "") (constant ((type . "serried")) "") (constant ((type . "inmargin")) "") (constant ((type . "inleft")) "") (constant ((type . "inright")) "") (constant ((type . "hanging")) "")) (parameter ((name . "headstyle")) (resolve ((name . "style")) "")) (parameter ((name . "headcolor")) (constant ((type . "cd:name") (default . " ")) "")) (parameter ((name . "headcommand")) (constant ((type . "cd:command")) "")) (parameter ((name . "hang")) (constant ((type . "fit")) "") (constant ((type . "broad")) "") (constant ((type . "cd:number")) "")) (parameter ((name . "before")) (constant ((type . "cd:command") (default . "\\blank")) "")) (parameter ((name . "inbetween")) (constant ((type . "cd:command") (default . "\\blank")) "")) (parameter ((name . "after")) (constant ((type . "cd:command") (default . "\\blank")) "")) (parameter ((name . "indentnext")) (resolve ((name . "indentnext")) "")) (parameter ((name . "indenting")) (resolve ((name . "indenting")) "")) (parameter ((name . "command")) (constant ((type . "cd:command")) "")) (parameter ((name . "display")) (constant ((type . "yes") (default . "yes")) "") (constant ((type . "no")) ""))))) (command ((name . "setupenumerations") (file . "core-des.tex")) (sequence nil (string ((value . "setupenumerations")) "")) (arguments nil (keywords ((n . "1") (optional . "yes") (list . "yes")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (inherit ((name . "setupdescriptions") (n . "2")) "")))) (command ((name . "defineenumeration") (file . "core-des.tex")) (sequence nil (string ((value . "defineenumeration")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "cd:name")) "")) (keywords ((n . "2") (optional . "yes")) (constant ((type . "cd:name")) "")) (assignments ((n . "3") (optional . "yes") (list . "yes")) (inherit ((name . "setupenumerations") (n . "2")) "")))) (command ((name . "enumeration") (generated . "yes") (file . "core-des.tex")) (sequence nil (variable ((value . "enumeration")) "")) (arguments nil (nothing ((n . "1") (interactive . "yes")) ""))) (command ((name . "enumeration") (type . "environment") (generated . "yes") (file . "core-des.tex")) (sequence nil (variable ((value . "enumeration")) ""))) (command ((name . "definedescription") (file . "core-des.tex")) (sequence nil (string ((value . "definedescription")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (optional . "yes") (list . "yes")) (inherit ((name . "setupdescriptions") (n . "2")) "")))) (command ((name . "description") (generated . "yes") (file . "core-des.tex")) (sequence nil (variable ((value . "description")) "")) (arguments nil (content ((n . "1")) "") (nothing ((n . "2")) ""))) (command ((name . "description") (type . "environment") (generated . "yes") (file . "core-des.tex")) (sequence nil (variable ((value . "description")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "setupindentations") (file . "core-des.tex")) (sequence nil (string ((value . "setupindentations")) "")) (arguments nil (keywords ((n . "1") (optional . "yes") (list . "yes")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "style")) (resolve ((name . "style")) "")) (parameter ((name . "headstyle")) (resolve ((name . "style")) "")) (parameter ((name . "width")) (constant ((type . "fit")) "") (constant ((type . "cd:dimension")) "")) (parameter ((name . "text")) (constant ((type . "cd:text")) "")) (parameter ((name . "sample")) (constant ((type . "cd:text")) "")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) "")) (parameter ((name . "distance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "separator")) (constant ((type . "cd:text")) ""))))) (command ((name . "defineindenting") (file . "core-des.tex")) (sequence nil (string ((value . "defineindenting")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (inherit ((name . "setupindentations") (n . "2")) "")))) (command ((name . "indentation") (generated . "yes") (file . "core-spa.tex")) (sequence nil (variable ((value . "indentation")) "")) (arguments nil (nothing ((n . "1")) ""))) (command ((name . "definelabel") (file . "core-des.tex")) (sequence nil (string ((value . "definelabel")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "text")) (constant ((type . "cd:text")) "")) (parameter ((name . "location")) (constant ((type . "inmargin")) "") (constant ((type . "intext")) "")) (parameter ((name . "way")) (constant ((type . "bytext")) "") (constant ((type . "bycd:section")) "")) (parameter ((name . "blockway")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "headstyle")) (resolve ((name . "style")) "")) (parameter ((name . "headcolor")) (constant ((type . "cd:name")) "")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) ""))))) (command ((name . "labeling") (generated . "yes") (file . "core-des.tex")) (sequence nil (variable ((value . "labeling")) "")) (arguments nil (reference ((n . "1") (optional . "yes")) ""))) (command ((name . "setupcolumns") (file . "page-mul.tex")) (sequence nil (string ((value . "setupcolumns")) "")) (arguments nil (assignments ((n . "1") (optional . "yes") (list . "yes")) (parameter ((name . "n")) (constant ((type . "cd:number")) "")) (parameter ((name . "ntop")) (constant ((type . "cd:number")) "")) (parameter ((name . "rule")) (constant ((type . "on")) "") (constant ((type . "off")) "")) (parameter ((name . "height")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "tolerance")) (constant ((type . "verystrict")) "") (constant ((type . "strict")) "") (constant ((type . "tolerant")) "") (constant ((type . "verytolerant")) "") (constant ((type . "stretch")) "")) (parameter ((name . "distance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "balance")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "align")) (constant ((type . "text")) "") (resolve ((name . "align")) "")) (parameter ((name . "blank")) (constant ((type . "fixed")) "") (constant ((type . "halfline")) "") (constant ((type . "line")) "") (constant ((type . "flexible")) "") (constant ((type . "big")) "") (constant ((type . "medium")) "") (constant ((type . "small")) "")) (parameter ((name . "option")) (constant ((type . "background")) "")) (parameter ((name . "direction")) (constant ((type . "left")) "") (constant ((type . "right")) "")) (inherit ((name . "setupframed") (n . "2")) "")))) (command ((name . "columns") (type . "environment") (file . "page-mul.tex")) (sequence nil (string ((value . "columns")) "")) (arguments nil (assignments ((n . "1") (optional . "yes") (list . "yes")) (inherit ((name . "setupcolumns") (n . "1")) "")))) (command ((name . "definetext") (file . "page-txt.tex")) (sequence nil (string ((value . "definetext")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2")) (constant ((type . "header")) "") (constant ((type . "footer")) "")) (keywords ((n . "3")) (constant ((type . "cd:text")) "")) (keywords ((n . "4") (optional . "yes")) (constant ((type . "cd:text")) "")) (keywords ((n . "5") (optional . "yes")) (constant ((type . "cd:text")) "")))) (command ((name . "setupheader") (file . "page-txt.tex")) (sequence nil (string ((value . "setupheader")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "cd:text") (default . "yes")) "") (constant ((type . "margin")) "") (constant ((type . "edge")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "state")) (constant ((type . "normal")) "") (constant ((type . "stop")) "") (constant ((type . "start")) "") (constant ((type . "empty")) "") (constant ((type . "high")) "") (constant ((type . "none")) "") (constant ((type . "nomarking")) "") (constant ((type . "cd:name")) "")) (parameter ((name . "strut")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "style")) (resolve ((name . "style")) "")) (parameter ((name . "leftstyle")) (resolve ((name . "style")) "")) (parameter ((name . "rightstyle")) (resolve ((name . "style")) "")) (parameter ((name . "leftwidth")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "rightwidth")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) ""))))) (command ((name . "setupfooter") (file . "page-txt.tex")) (sequence nil (string ((value . "setupfooter")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (inherit ((name . "setupheader") (n . "1")) "")) (assignments ((n . "2") (list . "yes")) (inherit ((name . "setupheader") (n . "2")) "")))) (command ((name . "setuptext") (file . "page-txt.tex")) (sequence nil (string ((value . "setuptext")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (inherit ((name . "setupheader") (n . "1")) "")) (assignments ((n . "2") (list . "yes")) (inherit ((name . "setupheader") (n . "2")) "")))) (command ((name . "setuptop") (file . "page-txt.tex")) (sequence nil (string ((value . "setuptop")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (inherit ((name . "setupheader") (n . "1")) "")) (assignments ((n . "2") (list . "yes")) (inherit ((name . "setupheader") (n . "2")) "")))) (command ((name . "setupbottom") (file . "page-txt.tex")) (sequence nil (string ((value . "setupbottom")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (inherit ((name . "setupheader") (n . "1")) "")) (assignments ((n . "2") (list . "yes")) (inherit ((name . "setupheader") (n . "2")) "")))) (command ((name . "noheaderandfooterlines") (file . "page-txt.tex")) (sequence nil (string ((value . "noheaderandfooterlines")) ""))) (command ((name . "notopandbottomlines") (file . "page-txt.tex")) (sequence nil (string ((value . "notopandbottomlines")) ""))) (command ((name . "setupheadertexts") (file . "page-txt.tex")) (sequence nil (string ((value . "setupheadertexts")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (resolve ((name . "layout-h")) "")) (keywords ((n . "2")) (resolve ((name . "texts")) "")) (keywords ((n . "3")) (resolve ((name . "texts")) "")))) (command ((name . "setupfootertexts") (file . "page-txt.tex")) (sequence nil (string ((value . "setupfootertexts")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (resolve ((name . "layout-h")) "")) (keywords ((n . "2")) (resolve ((name . "texts")) "")) (keywords ((n . "3")) (resolve ((name . "texts")) "")))) (command ((name . "setuptexttexts") (file . "page-txt.tex")) (sequence nil (string ((value . "setuptexttexts")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (resolve ((name . "layout-h")) "")) (keywords ((n . "2")) (resolve ((name . "texts")) "")) (keywords ((n . "3")) (resolve ((name . "texts")) "")))) (command ((name . "setuptoptexts") (file . "page-txt.tex")) (sequence nil (string ((value . "setuptoptexts")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (resolve ((name . "layout-h")) "")) (keywords ((n . "2")) (resolve ((name . "texts")) "")) (keywords ((n . "3")) (resolve ((name . "texts")) "")))) (command ((name . "setupbottomtexts") (file . "page-txt.tex")) (sequence nil (string ((value . "setupbottomtexts")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (resolve ((name . "layout-h")) "")) (keywords ((n . "2")) (resolve ((name . "texts")) "")) (keywords ((n . "3")) (resolve ((name . "texts")) "")))) (command ((name . "settextcontent") (file . "page-txt.tex")) (sequence nil (string ((value . "settextcontent")) "")) (arguments nil (keywords ((n . "1")) (resolve ((name . "layout-v")) "")) (keywords ((n . "2")) (resolve ((name . "layout-h")) "")) (keywords ((n . "3") (optional . "yes")) (resolve ((name . "texts")) "")) (keywords ((n . "4") (optional . "yes")) (resolve ((name . "texts")) "")) (keywords ((n . "5") (optional . "yes")) (resolve ((name . "texts")) "")))) (command ((name . "resettextcontent") (file . "page-txt.tex")) (sequence nil (string ((value . "resettextcontent")) "")) (arguments nil (keywords ((n . "1")) (resolve ((name . "layout-v")) "")) (keywords ((n . "2")) (resolve ((name . "layout-h")) "")) (keywords ((n . "3") (optional . "yes")) (constant ((type . "lefttext")) "") (constant ((type . "middletext")) "") (constant ((type . "righttext")) "")))) (command ((name . "definemarking") (file . "core-mar.tex")) (sequence nil (string ((value . "definemarking")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2") (optional . "yes")) (constant ((type . "cd:name")) "")))) (command ((name . "couplemarking") (file . "core-sec.tex")) (sequence nil (string ((value . "couplemarking")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2")) (constant ((type . "cd:name")) "")))) (command ((name . "decouplemarking") (file . "core-mar.tex")) (sequence nil (string ((value . "decouplemarking")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")))) (command ((name . "resetmarking") (file . "core-mar.tex")) (sequence nil (string ((value . "resetmarking")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")))) (command ((name . "setupmarking") (file . "core-mar.tex")) (sequence nil (string ((value . "setupmarking")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2")) (parameter ((name . "state")) (constant ((type . "start")) "") (constant ((type . "stop")) "")) (parameter ((name . "separator")) (constant ((type . "cd:command")) "")) (parameter ((name . "expansion")) (constant ((type . "yes")) "") (constant ((type . "no")) ""))))) (command ((name . "marking") (file . "core-mar.tex")) (sequence nil (string ((value . "marking")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (content ((n . "2")) ""))) (command ((name . "getmarking") (file . "core-mar.tex")) (sequence nil (string ((value . "getmarking")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2")) (constant ((type . "first")) "") (constant ((type . "last")) "") (constant ((type . "previous")) "") (constant ((type . "both")) "") (constant ((type . "all")) "") (constant ((type . "current")) "")))) (command ((name . "nomarking") (file . "core-mar.tex")) (sequence nil (string ((value . "nomarking")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "setuplayout") (file . "page-ini.tex")) (sequence nil (string ((value . "setuplayout")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "width")) (constant ((type . "cd:dimension")) "") (constant ((type . "fit")) "") (constant ((type . "middle")) "")) (parameter ((name . "height")) (constant ((type . "cd:dimension")) "") (constant ((type . "fit")) "") (constant ((type . "middle")) "")) (parameter ((name . "backspace")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "topspace")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "margin")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "leftmargin")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "rightmargin")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "header")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "footer")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "top")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "bottom")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "leftedge")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "rightedge")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "headerdistance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "footerdistance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "topdistance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "bottomdistance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "leftmargindistance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "rightmargindistance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "leftedgedistance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "rightedgedistance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "horoffset")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "veroffset")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "style")) (resolve ((name . "style")) "")) (parameter ((name . "color")) (constant ((type . "cd:name")) "")) (parameter ((name . "marking")) (constant ((type . "on")) "") (constant ((type . "off")) "") (constant ((type . "color")) "") (constant ((type . "screen")) "") (constant ((type . "cd:text")) "") (constant ((type . "page")) "")) (parameter ((name . "location")) (constant ((type . "left")) "") (constant ((type . "middle")) "") (constant ((type . "right")) "") (constant ((type . "bottom")) "") (constant ((type . "top")) "") (constant ((type . "singlesided")) "") (constant ((type . "doublesided")) "")) (parameter ((name . "scale")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "nx")) (constant ((type . "cd:number")) "")) (parameter ((name . "ny")) (constant ((type . "cd:number")) "")) (parameter ((name . "dx")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "dy")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "lines")) (constant ((type . "cd:number")) "")) (parameter ((name . "columns")) (constant ((type . "cd:number")) "")) (parameter ((name . "columndistance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "grid")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "bottomspace")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "cutspace")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "textdistance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "textwidth")) (constant ((type . "cd:number")) "")) (parameter ((name . "textmargin")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "clipoffset")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "page")) (constant ((type . "cd:name")) "")) (parameter ((name . "paper")) (constant ((type . "cd:name")) ""))))) (command ((name . "adaptlayout") (file . "page-lay.tex")) (sequence nil (string ((value . "adaptlayout")) "")) (arguments nil (keywords ((n . "1") (optional . "yes") (list . "yes")) (constant ((type . "cd:number")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "height")) (constant ((type . "cd:dimension")) "") (constant ((type . "max")) "")) (parameter ((name . "lines")) (constant ((type . "cd:number")) ""))))) (command ((name . "showgrid") (file . "page-ini.tex")) (sequence nil (string ((value . "showgrid")) "")) (arguments nil (keywords ((n . "1") (optional . "yes") (list . "yes")) (constant ((type . "reset")) "") (constant ((type . "top")) "") (constant ((type . "bottom")) "") (constant ((type . "none")) "") (constant ((type . "all")) "") (constant ((type . "lines")) "") (constant ((type . "frame")) "") (constant ((type . "nonumber")) "") (constant ((type . "right")) "") (constant ((type . "left")) "") (constant ((type . "outer")) "")) (content ((n . "2")) ""))) (command ((name . "placeongrid") (file . "core-grd.tex")) (sequence nil (string ((value . "placeongrid")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (inherit ((name . "moveongrid") (n . "1")) "")) (content ((n . "2")) ""))) (command ((name . "moveongrid") (file . "core-grd.tex")) (sequence nil (string ((value . "moveongrid")) "")) (arguments nil (keywords ((n . "1") (optional . "yes") (list . "yes")) (constant ((type . "standard") (default . "yes")) "") (constant ((type . "top")) "") (constant ((type . "both")) "") (constant ((type . "bottom")) "") (constant ((type . "-top")) "") (constant ((type . "-both")) "") (constant ((type . "-bottom")) "") (constant ((type . "cd:text")) "") (constant ((type . "high")) "") (constant ((type . "middle")) "") (constant ((type . "low")) "") (constant ((type . "page")) "") (constant ((type . "broad")) "") (constant ((type . "fit")) "") (constant ((type . "depth")) "") (constant ((type . "line")) "") (constant ((type . "reset")) "") (constant ((type . "none")) "") (constant ((type . "cd:dimension")) "")))) (command ((name . "project") (type . "environment") (file . "core-job.tex")) (sequence nil (string ((value . "project")) "")) (arguments nil (file ((n . "1")) ""))) (command ((name . "environment") (type . "environment") (file . "core-job.tex")) (sequence nil (string ((value . "environment")) "")) (arguments nil (file ((n . "1")) ""))) (command ((name . "product") (type . "environment") (file . "core-job.tex")) (sequence nil (string ((value . "product")) "")) (arguments nil (file ((n . "1")) ""))) (command ((name . "component") (type . "environment") (file . "core-job.tex")) (sequence nil (string ((value . "component")) "")) (arguments nil (file ((n . "1")) ""))) (command ((name . "nomorefiles") (file . "core-job.tex")) (sequence nil (string ((value . "nomorefiles")) ""))) (command ((name . "setupinterlinespace") (variant . "1") (file . "core-spa.tex")) (sequence nil (string ((value . "setupinterlinespace")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "reset")) "") (constant ((type . "small") (default . "yes")) "") (constant ((type . "medium")) "") (constant ((type . "auto")) "") (constant ((type . "big")) "") (constant ((type . "on")) "") (constant ((type . "off")) "")))) (command ((name . "setupinterlinespace2") (variant . "2") (file . "core-spa.tex")) (sequence nil (string ((value . "setupinterlinespace")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "height")) (constant ((type . "cd:number")) "")) (parameter ((name . "depth")) (constant ((type . "cd:number")) "")) (parameter ((name . "line")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "top")) (constant ((type . "cd:number")) "")) (parameter ((name . "bottom")) (constant ((type . "cd:number")) ""))))) (command ((name . "setuppagenumbering") (file . "page-num.tex")) (sequence nil (string ((value . "setuppagenumbering")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "alternative")) (constant ((type . "singlesided")) "") (constant ((type . "doublesided")) "")) (parameter ((name . "location")) (constant ((type . "header")) "") (constant ((type . "footer")) "") (constant ((type . "left")) "") (constant ((type . "right")) "") (constant ((type . "middle")) "") (constant ((type . "margin")) "") (constant ((type . "marginedge")) "") (constant ((type . "inleft")) "") (constant ((type . "inright")) "")) (parameter ((name . "conversion")) (constant ((type . "numbers")) "") (constant ((type . "characters")) "") (constant ((type . "Characters")) "") (constant ((type . "romannumerals")) "") (constant ((type . "Romannumerals")) "")) (parameter ((name . "style")) (resolve ((name . "style")) "")) (parameter ((name . "left")) (constant ((type . "cd:text")) "")) (parameter ((name . "right")) (constant ((type . "cd:text")) "")) (parameter ((name . "way")) (constant ((type . "bytext")) "") (constant ((type . "bycd:section")) "")) (parameter ((name . "text")) (constant ((type . "cd:text")) "")) (parameter ((name . "numberseparator")) (constant ((type . "cd:text")) "")) (parameter ((name . "textseparator")) (constant ((type . "cd:text")) "")) (parameter ((name . "cd:sectionnumber")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "separator")) (constant ((type . "cd:text")) "")) (parameter ((name . "strut")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "state")) (constant ((type . "start")) "") (constant ((type . "stop")) "")) (parameter ((name . "width")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "command")) (constant ((type . "cd:oneargument")) "")) (parameter ((name . "page")) (constant ((type . "last")) "") (constant ((type . "yes")) "") (constant ((type . "no")) ""))))) (command ((name . "setupnarrower") (file . "core-spa.tex")) (sequence nil (string ((value . "setupnarrower")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "left")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "right")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "middle")) (constant ((type . "cd:dimension")) ""))))) (command ((name . "define") (file . "syst-ext.tex")) (sequence nil (string ((value . "define")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "cd:number")) "")) (csname ((n . "2")) "") (content ((n . "3")) ""))) (command ((name . "usecommands") (file . "core-sys.tex")) (sequence nil (string ((value . "usecommands")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "definestartstop") (file . "core-sys.tex")) (sequence nil (string ((value . "definestartstop")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) "")) (parameter ((name . "style")) (resolve ((name . "style")) "")) (parameter ((name . "commands")) (constant ((type . "cd:command")) ""))))) (command ((name . "setupheads") (file . "core-sec.tex")) (sequence nil (string ((value . "setupheads")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "sectionnumber")) (constant ((type . "yes")) "") (constant ((type . "cd:number")) "") (constant ((type . "no")) "")) (parameter ((name . "alternative")) (constant ((type . "normal")) "") (constant ((type . "margin")) "") (constant ((type . "middle")) "") (constant ((type . "cd:text")) "") (constant ((type . "paragraph")) "")) (parameter ((name . "separator")) (constant ((type . "cd:text")) "")) (parameter ((name . "stopper")) (constant ((type . "cd:text")) "")) (parameter ((name . "align")) (resolve ((name . "align")) "")) (parameter ((name . "aligntitle")) (constant ((type . "yes")) "") (constant ((type . "float")) "") (constant ((type . "no")) "")) (parameter ((name . "tolerance")) (constant ((type . "verystrict")) "") (constant ((type . "strict")) "") (constant ((type . "tolerant")) "") (constant ((type . "verytolerant")) "") (constant ((type . "stretch")) "")) (parameter ((name . "indentnext")) (resolve ((name . "indentnext")) "")) (parameter ((name . "command")) (constant ((type . "cd:twoarguments")) "")) (parameter ((name . "margin")) (constant ((type . "cd:dimension")) ""))))) (command ((name . "setupcaptions") (file . "page-flt.tex")) (sequence nil (string ((value . "setupcaptions")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "location")) (constant ((type . "top")) "") (constant ((type . "bottom")) "") (constant ((type . "none")) "") (constant ((type . "high")) "") (constant ((type . "low")) "") (constant ((type . "middle")) "") (constant ((type . "left")) "") (constant ((type . "middle")) "") (constant ((type . "right")) "") (constant ((type . "lefthanging")) "") (constant ((type . "righthanging")) "") (constant ((type . "leftmargin")) "") (constant ((type . "rightmargin")) "") (constant ((type . "innermargin")) "") (constant ((type . "outermargin")) "")) (parameter ((name . "width")) (constant ((type . "fit")) "") (constant ((type . "broad")) "") (constant ((type . "max")) "") (constant ((type . "cd:dimension")) "")) (parameter ((name . "minwidth")) (constant ((type . "fit")) "") (constant ((type . "cd:dimension")) "")) (parameter ((name . "headstyle")) (resolve ((name . "style")) "")) (parameter ((name . "style")) (resolve ((name . "style")) "")) (parameter ((name . "number")) (constant ((type . "yes")) "") (constant ((type . "no")) "") (constant ((type . "none")) "")) (parameter ((name . "inbetween")) (constant ((type . "cd:command")) "")) (parameter ((name . "align")) (resolve ((name . "align")) "")) (parameter ((name . "conversion")) (constant ((type . "numbers")) "") (constant ((type . "characters")) "") (constant ((type . "Characters")) "") (constant ((type . "romannumerals")) "") (constant ((type . "Romannumerals")) "")) (parameter ((name . "way")) (constant ((type . "bytext")) "") (constant ((type . "bycd:section")) "")) (parameter ((name . "separator")) (constant ((type . "cd:text")) "")) (parameter ((name . "stopper")) (constant ((type . "cd:text")) "")) (parameter ((name . "command")) (constant ((type . "cd:command")) "")) (parameter ((name . "distance")) (constant ((type . "cd:dimension")) ""))))) (command ((name . "setupcaption") (file . "page-flt.tex")) (sequence nil (string ((value . "setupcaption")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (inherit ((name . "setupcaptions") (n . "1")) "")))) (command ((name . "setupfloats") (file . "page-flt.tex")) (sequence nil (string ((value . "setupfloats")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "location")) (constant ((type . "left")) "") (constant ((type . "right")) "") (constant ((type . "middle")) "")) (parameter ((name . "width")) (constant ((type . "fit")) "") (constant ((type . "cd:dimension")) "")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) "")) (parameter ((name . "margin")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "spacebefore")) (constant ((type . "small")) "") (constant ((type . "medium")) "") (constant ((type . "big")) "") (constant ((type . "none")) "")) (parameter ((name . "spaceafter")) (constant ((type . "small")) "") (constant ((type . "medium")) "") (constant ((type . "big")) "") (constant ((type . "none")) "")) (parameter ((name . "sidespacebefore")) (constant ((type . "small")) "") (constant ((type . "medium")) "") (constant ((type . "big")) "") (constant ((type . "none")) "")) (parameter ((name . "sidespaceafter")) (constant ((type . "small")) "") (constant ((type . "medium")) "") (constant ((type . "big")) "") (constant ((type . "none")) "")) (parameter ((name . "indentnext")) (resolve ((name . "indentnext")) "")) (parameter ((name . "ntop")) (constant ((type . "cd:number")) "")) (parameter ((name . "nbottom")) (constant ((type . "cd:number")) "")) (parameter ((name . "nlines")) (constant ((type . "cd:number")) "")) (parameter ((name . "default")) (constant ((type . "cd:name")) "")) (parameter ((name . "tolerance")) (constant ((type . "0")) "") (constant ((type . "1")) "") (constant ((type . "2")) "")) (parameter ((name . "leftmargindistance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "rightmargindistance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "sidealign")) (constant ((type . "normal")) "") (constant ((type . "line")) "")) (parameter ((name . "numbering")) (constant ((type . "yes")) "") (constant ((type . "nocheck")) "")) (inherit ((name . "setupframed") (n . "2")) "")))) (command ((name . "setupfloatsplitting") (file . "core-tsp.tex")) (sequence nil (string ((value . "setupfloatsplitting")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "conversion")) (constant ((type . "numbers")) "") (constant ((type . "characters")) "") (constant ((type . "Characters")) "") (constant ((type . "romannumerals")) "") (constant ((type . "Romannumerals")) "")) (parameter ((name . "lines")) (constant ((type . "cd:number")) ""))))) (command ((name . "splitfloat") (file . "core-tsp.tex")) (sequence nil (string ((value . "splitfloat")) "")) (arguments nil (assignments ((n . "1") (optional . "yes") (list . "yes")) (inherit ((name . "setupfloatsplitting") (n . "1")) "")) (content ((n . "2")) "") (content ((n . "3")) ""))) (command ((name . "setupoppositeplacing") (file . "page-ini.tex")) (sequence nil (string ((value . "setupoppositeplacing")) "")) (arguments nil (assignments ((n . "1")) (parameter ((name . "state")) (constant ((type . "start")) "") (constant ((type . "stop")) "")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "inbetween")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) ""))))) (command ((name . "opposite") (type . "environment") (file . "page-ini.tex")) (sequence nil (string ((value . "opposite")) ""))) (command ((name . "setuphyphenmark") (file . "core-mis.tex")) (sequence nil (string ((value . "setuphyphenmark")) "")) (arguments nil (assignments ((n . "1")) (parameter ((name . "sign")) (constant ((type . "--")) "") (constant ((type . "---")) "") (constant ((type . "-")) "") (constant ((type . "~")) "") (constant ((type . "(")) "") (constant ((type . ")")) "") (constant ((type . "=")) "") (constant ((type . "/")) ""))))) (command ((name . "setuppositioning") (file . "page-lyr.tex")) (sequence nil (string ((value . "setuppositioning")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "state")) (constant ((type . "start")) "") (constant ((type . "overlay")) "")) (parameter ((name . "unit")) (constant ((type . "cm")) "") (constant ((type . "pt")) "") (constant ((type . "em")) "") (constant ((type . "mm")) "") (constant ((type . "ex")) "") (constant ((type . "es")) "") (constant ((type . "in")) "")) (parameter ((name . "factor")) (constant ((type . "cd:number")) "")) (parameter ((name . "scale")) (constant ((type . "cd:number")) "")) (parameter ((name . "offset")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "xstep")) (constant ((type . "absolute")) "") (constant ((type . "relative")) "")) (parameter ((name . "ystep")) (constant ((type . "absolute")) "") (constant ((type . "relative")) ""))))) (command ((name . "positioning") (type . "environment") (file . "page-lyr.tex")) (sequence nil (string ((value . "positioning")) ""))) (command ((name . "grid") (file . "core-spa.tex")) (sequence nil (string ((value . "grid")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "x")) (constant ((type . "cd:number")) "")) (parameter ((name . "y")) (constant ((type . "cd:number")) "")) (parameter ((name . "nx")) (constant ((type . "cd:number")) "")) (parameter ((name . "ny")) (constant ((type . "cd:number")) "")) (parameter ((name . "dx")) (constant ((type . "cd:number")) "")) (parameter ((name . "dy")) (constant ((type . "cd:number")) "")) (parameter ((name . "xstep")) (constant ((type . "cd:number")) "")) (parameter ((name . "ystep")) (constant ((type . "cd:number")) "")) (parameter ((name . "offset")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "factor")) (constant ((type . "cd:number")) "")) (parameter ((name . "scale")) (constant ((type . "cd:number")) "")) (parameter ((name . "unit")) (constant ((type . "cm")) "") (constant ((type . "pt")) "") (constant ((type . "em")) "") (constant ((type . "mm")) "") (constant ((type . "ex")) "") (constant ((type . "es")) "") (constant ((type . "in")) "")) (parameter ((name . "location")) (constant ((type . "left")) "") (constant ((type . "middle")) ""))))) (command ((name . "page") (file . "page-ini.tex")) (sequence nil (string ((value . "page")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "yes") (default . "yes")) "") (constant ((type . "makeup")) "") (constant ((type . "no")) "") (constant ((type . "preference")) "") (constant ((type . "bigpreference")) "") (constant ((type . "left")) "") (constant ((type . "right")) "") (constant ((type . "disable")) "") (constant ((type . "last")) "") (constant ((type . "quadruple")) "") (constant ((type . "even")) "") (constant ((type . "odd")) "") (constant ((type . "blank")) "") (constant ((type . "empty")) "") (constant ((type . "reset")) "") (constant ((type . "start")) "") (constant ((type . "stop")) "")))) (command ((name . "setupreferencing") (file . "core-ref.tex") (category . "references")) (sequence nil (string ((value . "setupreferencing")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "state")) (constant ((type . "start")) "") (constant ((type . "stop")) "")) (parameter ((name . "cd:sectionnumber")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "prefix")) (constant ((type . "+")) "") (constant ((type . "-")) "") (constant ((type . "cd:text")) "")) (parameter ((name . "interaction")) (constant ((type . "label")) "") (constant ((type . "cd:text")) "") (constant ((type . "all")) "") (constant ((type . "symbol")) "")) (parameter ((name . "width")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "left")) (constant ((type . "cd:command")) "")) (parameter ((name . "right")) (constant ((type . "cd:command")) "")) (parameter ((name . "convertfile")) (constant ((type . "yes")) "") (constant ((type . "no")) "") (constant ((type . "small")) "") (constant ((type . "big")) "")) (parameter ((name . "separator")) (constant ((type . "cd:text")) "")) (parameter ((name . "autofile")) (constant ((type . "yes")) "") (constant ((type . "no")) "") (constant ((type . "page")) "")) (parameter ((name . "global")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "export")) (constant ((type . "yes")) "") (constant ((type . "no")) ""))))) (command ((name . "setupurl") (file . "core-ref.tex") (category . "references")) (sequence nil (string ((value . "setupurl")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "style")) (resolve ((name . "style")) "")) (parameter ((name . "urlalternative")) (constant ((type . "none")) "") (constant ((type . "both")) "") (constant ((type . "before")) "") (constant ((type . "after")) "")) (parameter ((name . "urlspace")) (constant ((type . "yes")) "") (constant ((type . "no")) ""))))) (command ((name . "writetoreferencelist") (file . "core-lst.tex")) (sequence nil (string ((value . "writetoreferencelist")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (content ((n . "2")) "") (content ((n . "3")) ""))) (command ((name . "placereferencelist") (file . "core-lst.tex")) (sequence nil (string ((value . "placereferencelist")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "cd:name")) "")))) (command ((name . "definereferencelist") (file . "core-lst.tex")) (sequence nil (string ((value . "definereferencelist")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (optional . "yes") (list . "yes")) (inherit ((name . "setupreferencelist") (n . "2")) "")))) (command ((name . "setupreferencelist") (file . "core-lst.tex")) (sequence nil (string ((value . "setupreferencelist")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "state")) (constant ((type . "start")) "") (constant ((type . "stop")) "")) (parameter ((name . "criterium")) (constant ((type . "cd:section")) "") (constant ((type . "local")) "") (constant ((type . "previous")) "") (constant ((type . "all")) "")) (parameter ((name . "command")) (constant ((type . "cd:command")) "")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) ""))))) (command ((name . "writetolist") (file . "core-lst.tex")) (sequence nil (string ((value . "writetolist")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:section")) "") (constant ((type . "cd:name")) "")) (content ((n . "2")) "") (content ((n . "3")) ""))) (command ((name . "writebetweenlist") (file . "core-lst.tex")) (sequence nil (string ((value . "writebetweenlist")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:section")) "") (constant ((type . "cd:name")) "")) (content ((n . "2")) ""))) (command ((name . "nolist") (file . "core-lst.tex")) (sequence nil (string ((value . "nolist")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "listsymbol") (file . "core-lst.tex")) (sequence nil (string ((value . "listsymbol")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (content ((n . "2")) ""))) (command ((name . "placelist") (file . "core-lst.tex")) (sequence nil (string ((value . "placelist")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (optional . "yes") (list . "yes")) (inherit ((name . "setuplist") (n . "2")) "")))) (command ((name . "determinelistcharacteristics") (file . "core-lst.tex")) (sequence nil (string ((value . "determinelistcharacteristics")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (optional . "yes") (list . "yes")) (inherit ((name . "setuplist") (n . "2")) "")))) (command ((name . "placecombinedlist") (variant . "1") (file . "core-lst.tex")) (sequence nil (string ((value . "placecombinedlist")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (optional . "yes") (list . "yes")) (inherit ((name . "setupcombinedlist") (n . "2")) "")))) (command ((name . "definelist") (file . "core-lst.tex")) (sequence nil (string ((value . "definelist")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2") (optional . "yes")) (constant ((type . "cd:name")) "")) (assignments ((n . "3") (optional . "yes") (list . "yes")) (inherit ((name . "setuplist") (n . "2")) "")))) (command ((name . "setuplist") (file . "core-lst.tex")) (sequence nil (string ((value . "setuplist")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "state")) (constant ((type . "start")) "") (constant ((type . "stop")) "")) (parameter ((name . "alternative")) (constant ((type . "a")) "") (constant ((type . "b")) "") (constant ((type . "c")) "") (constant ((type . "...")) "") (constant ((type . "none")) "") (constant ((type . "command")) "")) (parameter ((name . "coupling")) (constant ((type . "on")) "") (constant ((type . "off")) "")) (parameter ((name . "criterium")) (constant ((type . "cd:section")) "") (constant ((type . "local")) "") (constant ((type . "previous")) "") (constant ((type . "current")) "") (constant ((type . "here")) "") (constant ((type . "intro")) "") (constant ((type . "all")) "")) (parameter ((name . "extras")) (constant ((type . "cd:list")) "")) (parameter ((name . "style")) (resolve ((name . "style")) "")) (parameter ((name . "numberstyle")) (resolve ((name . "style")) "")) (parameter ((name . "textstyle")) (resolve ((name . "style")) "")) (parameter ((name . "pagestyle")) (resolve ((name . "style")) "")) (parameter ((name . "color")) (constant ((type . "cd:name")) "")) (parameter ((name . "command")) (constant ((type . "cd:threearguments")) "")) (parameter ((name . "numbercommand")) (constant ((type . "cd:oneargument")) "")) (parameter ((name . "textcommand")) (constant ((type . "cd:oneargument")) "")) (parameter ((name . "pagecommand")) (constant ((type . "cd:oneargument")) "")) (parameter ((name . "interaction")) (constant ((type . "sectionnumber")) "") (constant ((type . "text")) "") (constant ((type . "pagenumber")) "") (constant ((type . "all")) "") (constant ((type . "none")) "")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) "")) (parameter ((name . "inbetween")) (constant ((type . "cd:command")) "")) (parameter ((name . "left")) (constant ((type . "cd:text")) "")) (parameter ((name . "right")) (constant ((type . "cd:text")) "")) (parameter ((name . "label")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "prefix")) (constant ((type . "yes")) "") (constant ((type . "no")) "") (constant ((type . "none")) "")) (parameter ((name . "pagenumber")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "headnumber")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "cd:sectionnumber")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "aligntitle")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "margin")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "width")) (constant ((type . "cd:dimension")) "") (constant ((type . "fit")) "")) (parameter ((name . "height")) (constant ((type . "cd:dimension")) "") (constant ((type . "fit")) "") (constant ((type . "broad")) "")) (parameter ((name . "depth")) (constant ((type . "cd:dimension")) "") (constant ((type . "fit")) "") (constant ((type . "broad")) "")) (parameter ((name . "distance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "separator")) (constant ((type . "cd:text")) "")) (parameter ((name . "stopper")) (constant ((type . "cd:text")) "")) (parameter ((name . "symbol")) (constant ((type . "none")) "") (constant ((type . "1")) "") (constant ((type . "2")) "") (constant ((type . "3")) "") (constant ((type . "...")) "")) (parameter ((name . "expansion")) (constant ((type . "yes")) "") (constant ((type . "no")) "") (constant ((type . "command")) "")) (parameter ((name . "maxwidth")) (constant ((type . "cd:dimension")) "")) (inherit ((name . "setupframed") (n . "2")) "")))) (command ((name . "setuplistalternative") (file . "core-lst.tex")) (sequence nil (string ((value . "setuplistalternative")) "")) (arguments nil (keywords ((n . "1") (list . "no")) (constant ((type . "a")) "") (constant ((type . "b")) "") (constant ((type . "c")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "command")) (constant ((type . "cd:command")) "")) (parameter ((name . "width")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "stretch")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "distance")) (constant ((type . "cd:dimension")) ""))))) (command ((name . "definecombinedlist") (file . "core-lst.tex")) (sequence nil (string ((value . "definecombinedlist")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2") (list . "yes")) (constant ((type . "cd:list")) "")) (assignments ((n . "3") (optional . "yes") (list . "yes")) (inherit ((name . "setupcombinedlist") (n . "2")) "")))) (command ((name . "setupcombinedlist") (file . "core-lst.tex")) (sequence nil (string ((value . "setupcombinedlist")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "level")) (constant ((type . "1")) "") (constant ((type . "2")) "") (constant ((type . "3")) "") (constant ((type . "4")) "") (constant ((type . "cd:section")) "") (constant ((type . "current")) "")) (inherit ((name . "setuplist") (n . "2")) "")))) (command ((name . "placecombinedlist") (variant . "2") (generated . "yes") (file . "core-lst.tex")) (sequence nil (string ((value . "place")) "") (variable ((value . "combinedlist")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (optional . "yes") (list . "yes")) (inherit ((name . "setupcombinedlist") (n . "2")) "")))) (command ((name . "completecombinedlist") (generated . "yes") (file . "core-lst.tex")) (sequence nil (string ((value . "complete")) "") (variable ((value . "combinedlist")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (optional . "yes") (list . "yes")) (inherit ((name . "setupcombinedlist") (n . "2")) "")))) (command ((name . "setupnumbering") (file . "core-num.tex")) (sequence nil (string ((value . "setupnumbering")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "way")) (constant ((type . "bytext")) "") (constant ((type . "bycd:section")) "")) (parameter ((name . "state")) (constant ((type . "start")) "") (constant ((type . "stop")) ""))))) (command ((name . "setupformulas") (file . "core-mat.tex")) (sequence nil (string ((value . "setupformulas")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "location")) (constant ((type . "left")) "") (constant ((type . "right")) "")) (parameter ((name . "left")) (constant ((type . "cd:text")) "")) (parameter ((name . "right")) (constant ((type . "cd:text")) "")) (parameter ((name . "align")) (resolve ((name . "align")) "")) (parameter ((name . "option")) (constant ((type . "middle")) "")) (parameter ((name . "strut")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "distance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "margin")) (constant ((type . "cd:dimension")) "") (constant ((type . "standard")) "") (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "align")) (constant ((type . "flushleft")) "") (constant ((type . "flushright")) "") (constant ((type . "middle")) "") (constant ((type . "center")) "")) (parameter ((name . "leftmargin")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "rightmargin")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "indentnext")) (resolve ((name . "indentnext")) "")) (parameter ((name . "alternative")) (constant ((type . "cd:name")) "")) (parameter ((name . "spacebefore")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "after")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "separator")) (constant ((type . "cd:text")) "")) (parameter ((name . "conversion")) (constant ((type . "numbers")) "") (constant ((type . "characters")) "") (constant ((type . "Characters")) "") (constant ((type . "romannumerals")) "") (constant ((type . "Romannumerals")) "") (constant ((type . "cd:text")) ""))))) (command ((name . "publication") (file . "core-mis.tex")) (sequence nil (string ((value . "publication")) "")) (arguments nil (reference ((n . "1")) ""))) (command ((name . "setuppublications") (file . "core-mis.tex")) (sequence nil (string ((value . "setuppublications")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "alternative")) (constant ((type . "apa")) "") (constant ((type . "normal")) "")) (inherit ((name . "setupenumerations") (n . "2")) "")))) (command ((name . "setuplines") (file . "page-lin.tex")) (sequence nil (string ((value . "setuplines")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) "")) (parameter ((name . "inbetween")) (constant ((type . "cd:command")) "")) (parameter ((name . "indenting")) (resolve ((name . "indenting")) "")) (parameter ((name . "space")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "option")) (constant ((type . "packed")) ""))))) (command ((name . "lines") (type . "environment")) (sequence nil (string ((value . "lines")) ""))) (command ((name . "setupparagraphnumbering") (file . "page-lin.tex")) (sequence nil (string ((value . "setupparagraphnumbering")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "state")) (constant ((type . "start")) "") (constant ((type . "stop")) "") (constant ((type . "reset")) "") (constant ((type . "line")) "")) (parameter ((name . "style")) (resolve ((name . "style")) "")) (parameter ((name . "distance")) (constant ((type . "cd:dimension")) ""))))) (command ((name . "setuplinenumbering") (file . "page-lin.tex")) (sequence nil (string ((value . "setuplinenumbering")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "conversion")) (constant ((type . "numbers")) "") (constant ((type . "characters")) "") (constant ((type . "Characters")) "") (constant ((type . "romannumerals")) "") (constant ((type . "Romannumerals")) "") (constant ((type . "cd:text")) "")) (parameter ((name . "start")) (constant ((type . "cd:number")) "")) (parameter ((name . "step")) (constant ((type . "cd:number")) "")) (parameter ((name . "width")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "location")) (constant ((type . "middle")) "") (constant ((type . "left")) "") (constant ((type . "margin")) "") (constant ((type . "inmargin")) "") (constant ((type . "inleft")) "") (constant ((type . "right")) "") (constant ((type . "inright")) "") (constant ((type . "inner")) "") (constant ((type . "outer")) "") (constant ((type . "text")) "") (constant ((type . "begin")) "") (constant ((type . "end")) "")) (parameter ((name . "style")) (resolve ((name . "style")) "")) (parameter ((name . "prefix")) (constant ((type . "cd:text")) "")) (parameter ((name . "referencing")) (constant ((type . "on")) "") (constant ((type . "off")) ""))))) (command ((name . "linenumbering") (type . "environment") (file . "page-lin.tex")) (sequence nil (string ((value . "linenumbering")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "continue")) "")))) (command ((name . "line") (type . "environment")) (sequence nil (string ((value . "line")) "")) (arguments nil (reference ((n . "1")) ""))) (command ((name . "someline") (file . "page-lin.tex")) (sequence nil (string ((value . "someline")) "")) (arguments nil (reference ((n . "1")) ""))) (command ((name . "inline") (file . "page-lin.tex")) (sequence nil (string ((value . "inline")) "")) (arguments nil (reference ((n . "1")) ""))) (command ((name . "setupinmargin") (file . "page-mar.tex")) (sequence nil (string ((value . "setupinmargin")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "left")) "") (constant ((type . "right")) "") (constant ((type . "cd:number")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "location")) (constant ((type . "left")) "") (constant ((type . "right")) "") (constant ((type . "both")) "")) (parameter ((name . "style")) (resolve ((name . "style")) "")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) "")) (parameter ((name . "align")) (resolve ((name . "align")) "")) (parameter ((name . "line")) (constant ((type . "cd:number")) "")) (parameter ((name . "distance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "separator")) (constant ((type . "cd:text")) "")) (parameter ((name . "width")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "distance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "stack")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (inherit ((name . "setupframed") (n . "2")) "")))) (command ((name . "setuppagenumber") (file . "page-num.tex")) (sequence nil (string ((value . "setuppagenumber")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "number")) (constant ((type . "cd:number")) "")) (parameter ((name . "state")) (constant ((type . "start")) "") (constant ((type . "stop")) "") (constant ((type . "keep")) ""))))) (command ((name . "setupsubpagenumber") (file . "page-num.tex")) (sequence nil (string ((value . "setupsubpagenumber")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "way")) (constant ((type . "bytext")) "") (constant ((type . "bycd:section")) "")) (parameter ((name . "state")) (constant ((type . "start")) "") (constant ((type . "stop")) "") (constant ((type . "none")) ""))))) (command ((name . "setupblank") (file . "core-spa.tex")) (sequence nil (string ((value . "setupblank")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "normal") (default . "yes")) "") (constant ((type . "default")) "") (constant ((type . "standard")) "") (constant ((type . "line")) "") (constant ((type . "halfline")) "") (constant ((type . "cd:dimension")) "") (constant ((type . "big")) "") (constant ((type . "medium")) "") (constant ((type . "small")) "") (constant ((type . "fixed")) "") (constant ((type . "flexible")) "") (constant ((type . "global")) "") (constant ((type . "unknown")) "")))) (command ((name . "defineblank") (file . "core-spa.tex")) (sequence nil (string ((value . "defineblank")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2")) (inherit ((name . "setupblank") (n . "1")) "")))) (command ((name . "definepapersize") (file . "page-lay.tex")) (sequence nil (string ((value . "definepapersize")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "width")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "height")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "offset")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "scale")) (constant ((type . "cd:number")) ""))))) (command ((name . "setuppaper") (file . "page-lay.tex")) (sequence nil (string ((value . "setuppaper")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "paper")) (constant ((type . "cd:name")) "")) (parameter ((name . "page")) (constant ((type . "cd:name")) "")) (parameter ((name . "nx")) (constant ((type . "cd:number")) "")) (parameter ((name . "ny")) (constant ((type . "cd:number")) "")) (parameter ((name . "width")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "height")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "topspace")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "backspace")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "option")) (constant ((type . "max")) "") (constant ((type . "fit")) "")) (parameter ((name . "method")) (constant ((type . "normal")) "") (constant ((type . "cd:name")) ""))))) (command ((name . "setuppapersize") (file . "page-lay.tex")) (sequence nil (string ((value . "setuppapersize")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "A3")) "") (constant ((type . "A4") (default . "yes")) "") (constant ((type . "A5")) "") (constant ((type . "A6")) "") (constant ((type . "letter")) "") (constant ((type . "...")) "") (constant ((type . "CD")) "") (constant ((type . "cd:name")) "") (constant ((type . "landscape")) "") (constant ((type . "mirrored")) "") (constant ((type . "rotated")) "") (constant ((type . "90")) "") (constant ((type . "180")) "") (constant ((type . "270")) "")) (keywords ((n . "2") (optional . "yes") (list . "yes")) (constant ((type . "negative")) "") (inherit ((name . "setuppapersize") (n . "1")) "")))) (command ((name . "setuparranging") (file . "page-imp.tex")) (sequence nil (string ((value . "setuparranging")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "disable")) "") (constant ((type . "2*16")) "") (constant ((type . "2*8")) "") (constant ((type . "2*4")) "") (constant ((type . "2*2")) "") (constant ((type . "2**2")) "") (constant ((type . "2*2*4")) "") (constant ((type . "2*4*2")) "") (constant ((type . "2UP")) "") (constant ((type . "2DOWN")) "") (constant ((type . "2SIDE")) "") (constant ((type . "2TOP")) "") (constant ((type . "mirrored")) "") (constant ((type . "rotated")) "") (constant ((type . "doublesided")) "") (constant ((type . "negative")) "") (constant ((type . "background")) "") (constant ((type . "90")) "") (constant ((type . "180")) "") (constant ((type . "270")) "")))) (command ((name . "showprint") (file . "page-run.tex")) (sequence nil (string ((value . "showprint")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (inherit ((name . "setuppapersize") (n . "1")) "")) (keywords ((n . "2") (list . "yes")) (inherit ((name . "setuppapersize") (n . "2")) "")) (assignments ((n . "3") (list . "yes")) (inherit ((name . "setuplayout") (n . "1")) "")))) (command ((name . "definelogo") (file . "page-log.tex")) (sequence nil (string ((value . "definelogo")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2")) (constant ((type . "top")) "") (constant ((type . "header")) "") (constant ((type . "footer")) "") (constant ((type . "bottom")) "")) (keywords ((n . "3")) (constant ((type . "none")) "") (constant ((type . "page")) "") (constant ((type . "leftedge")) "") (constant ((type . "leftmargin")) "") (constant ((type . "left")) "") (constant ((type . "middle")) "") (constant ((type . "right")) "") (constant ((type . "rightmargin")) "") (constant ((type . "rightedge")) "")) (assignments ((n . "4") (list . "yes")) (parameter ((name . "command")) (constant ((type . "cd:command")) "") (constant ((type . "cd:text")) "")) (parameter ((name . "state")) (constant ((type . "start")) "") (constant ((type . "stop")) ""))))) (command ((name . "placelogos") (file . "page-log.tex")) (sequence nil (string ((value . "placelogos")) "")) (arguments nil (keywords ((n . "1") (optional . "yes") (list . "yes")) (constant ((type . "cd:name")) "")))) (command ((name . "setupwhitespace")) (sequence nil (string ((value . "setupwhitespace")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "none") (default . "yes")) "") (constant ((type . "small")) "") (constant ((type . "medium")) "") (constant ((type . "big")) "") (constant ((type . "line")) "") (constant ((type . "fixed")) "") (constant ((type . "fix")) "") (constant ((type . "cd:dimension")) "")))) (command ((name . "setupindenting")) (sequence nil (string ((value . "setupindenting")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (resolve ((name . "indenting")) "")))) (command ((name . "definesectionblock") (file . "core-sec.tex")) (sequence nil (string ((value . "definesectionblock")) "")) (arguments nil (keywords ((n . "1")) (inherit ((name . "setupsectionblock") (n . "1")) "")) (assignments ((n . "2") (optional . "yes") (list . "yes")) (inherit ((name . "setupsectionblock") (n . "2")) "")))) (command ((name . "setupsectionblock") (file . "core-sec.tex")) (sequence nil (string ((value . "setupsectionblock")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "number")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "page")) (constant ((type . "yes")) "") (constant ((type . "right")) "")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) ""))))) (command ((name . "definesection") (file . "core-sec.tex")) (sequence nil (string ((value . "definesection")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")))) (command ((name . "setupsection") (file . "core-sec.tex")) (sequence nil (string ((value . "setupsection")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2") (optional . "yes")) (constant ((type . "cd:name")) "")) (assignments ((n . "3") (list . "yes")) (parameter ((name . "conversion")) (constant ((type . "numbers")) "") (constant ((type . "characters")) "") (constant ((type . "Characters")) "") (constant ((type . "romannumerals")) "") (constant ((type . "Romannumerals")) "")) (parameter ((name . "previousnumber")) (constant ((type . "yes")) "") (constant ((type . "no")) ""))))) (command ((name . "setuphead") (file . "core-sec.tex")) (sequence nil (string ((value . "setuphead")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "cd:section")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "style")) (resolve ((name . "style")) "")) (parameter ((name . "textstyle")) (resolve ((name . "style")) "")) (parameter ((name . "numberstyle")) (resolve ((name . "style")) "")) (parameter ((name . "color")) (constant ((type . "cd:name")) "")) (parameter ((name . "textcolor")) (constant ((type . "cd:name")) "")) (parameter ((name . "numbercolor")) (constant ((type . "cd:name")) "")) (parameter ((name . "number")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "ownnumber")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "page")) (constant ((type . "left")) "") (constant ((type . "right")) "") (constant ((type . "yes")) "")) (parameter ((name . "continue")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "header")) (constant ((type . "none")) "") (constant ((type . "empty")) "") (constant ((type . "high")) "") (constant ((type . "nomarking")) "")) (parameter ((name . "text")) (constant ((type . "none")) "") (constant ((type . "empty")) "") (constant ((type . "high")) "") (constant ((type . "nomarking")) "")) (parameter ((name . "footer")) (constant ((type . "none")) "") (constant ((type . "empty")) "") (constant ((type . "high")) "") (constant ((type . "nomarking")) "")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "inbetween")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) "")) (parameter ((name . "alternative")) (constant ((type . "normal")) "") (constant ((type . "inmargin")) "") (constant ((type . "middle")) "") (constant ((type . "cd:text")) "")) (parameter ((name . "hang")) (constant ((type . "none")) "") (constant ((type . "broad")) "") (constant ((type . "fit")) "") (constant ((type . "line")) "") (constant ((type . "cd:number")) "")) (parameter ((name . "command")) (constant ((type . "cd:twoarguments")) "")) (parameter ((name . "numbercommand")) (constant ((type . "cd:oneargument")) "")) (parameter ((name . "textcommand")) (constant ((type . "cd:oneargument")) "")) (parameter ((name . "deepnumbercommand")) (constant ((type . "cd:oneargument")) "")) (parameter ((name . "deeptextcommand")) (constant ((type . "cd:oneargument")) "")) (parameter ((name . "prefix")) (constant ((type . "+")) "") (constant ((type . "-")) "") (constant ((type . "cd:text")) "")) (parameter ((name . "placehead")) (constant ((type . "yes")) "") (constant ((type . "no")) "") (constant ((type . "empty")) "")) (parameter ((name . "incrementnumber")) (constant ((type . "yes")) "") (constant ((type . "no")) "") (constant ((type . "cd:list")) "") (constant ((type . "cd:file")) "")) (parameter ((name . "resetnumber")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "file")) (constant ((type . "cd:name")) "")) (parameter ((name . "expansion")) (constant ((type . "yes")) "") (constant ((type . "no")) "") (constant ((type . "command")) "")) (parameter ((name . "margintext")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "interaction")) (constant ((type . "list")) "") (constant ((type . "none")) "")) (inherit ((name . "setupheads") (n . "1")) "")))) (command ((name . "setupheadnumber") (file . "core-sec.tex")) (sequence nil (string ((value . "setupheadnumber")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:section")) "")) (keywords ((n . "2")) (constant ((type . "cd:number")) "") (constant ((type . "+cd:number")) "") (constant ((type . "-cd:number")) "")))) (command ((name . "headnumber")) (sequence nil (string ((value . "headnumber")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "cd:section")) "")))) (command ((name . "determineheadnumber") (file . "core-sec.tex")) (sequence nil (string ((value . "determineheadnumber")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:section")) "")))) (command ((name . "currentheadnumber") (file . "core-sec.tex")) (sequence nil (string ((value . "currentheadnumber")) ""))) (command ((name . "nextsection") (generated . "yes") (file . "core-sec.tex")) (sequence nil (string ((value . "next")) "") (variable ((value . "section")) ""))) (command ((name . "definehead") (file . "core-sec.tex")) (sequence nil (string ((value . "definehead")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2")) (constant ((type . "cd:section")) "")))) (command ((name . "setupitemgroup") (file . "core-itm.tex")) (sequence nil (string ((value . "setupitemgroup")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2") (optional . "yes")) (constant ((type . "cd:number")) "") (constant ((type . "each")) "")) (keywords ((n . "3") (optional . "yes") (list . "yes")) (constant ((type . "standard") (default . "yes")) "") (constant ((type . "broad")) "") (constant ((type . "serried")) "") (constant ((type . "packed")) "") (constant ((type . "unpacked")) "") (constant ((type . "nowhite")) "") (constant ((type . "before")) "") (constant ((type . "after")) "") (constant ((type . "stopper")) "") (constant ((type . "joinedup")) "") (constant ((type . "atmargin")) "") (constant ((type . "inmargin")) "") (constant ((type . "autointro")) "") (constant ((type . "loose")) "") (constant ((type . "repeat")) "") (constant ((type . "cd:section")) "") (constant ((type . "paragraph")) "") (constant ((type . "intext")) "") (constant ((type . "random")) "") (constant ((type . "reverse")) "")) (assignments ((n . "4") (optional . "yes") (list . "yes")) (parameter ((name . "margin")) (constant ((type . "no")) "") (constant ((type . "standard")) "") (constant ((type . "cd:dimension")) "")) (parameter ((name . "leftmargin")) (constant ((type . "no")) "") (constant ((type . "standard")) "") (constant ((type . "cd:dimension")) "")) (parameter ((name . "rightmargin")) (constant ((type . "no")) "") (constant ((type . "standard")) "") (constant ((type . "cd:dimension")) "")) (parameter ((name . "width")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "distance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "step")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "factor")) (constant ((type . "cd:number")) "")) (parameter ((name . "items")) (constant ((type . "cd:number")) "")) (parameter ((name . "start")) (constant ((type . "cd:number")) "")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "inbetween")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) "")) (parameter ((name . "left")) (constant ((type . "cd:text")) "")) (parameter ((name . "right")) (constant ((type . "cd:text")) "")) (parameter ((name . "beforehead")) (constant ((type . "cd:command")) "")) (parameter ((name . "afterhead")) (constant ((type . "cd:command")) "")) (parameter ((name . "headstyle")) (resolve ((name . "style")) "")) (parameter ((name . "marstyle")) (resolve ((name . "style")) "")) (parameter ((name . "symstyle")) (resolve ((name . "style")) "")) (parameter ((name . "stopper")) (constant ((type . "cd:text")) "")) (parameter ((name . "n")) (constant ((type . "cd:number")) "")) (parameter ((name . "symbol")) (constant ((type . "cd:number")) "")) (parameter ((name . "align")) (resolve ((name . "align")) "")) (parameter ((name . "symalign")) (resolve ((name . "symalign")) "")) (parameter ((name . "indentnext")) (resolve ((name . "indentnext")) "")) (parameter ((name . "textdistance")) (constant ((type . "none")) "") (constant ((type . "big")) "") (constant ((type . "medium")) "") (constant ((type . "small")) ""))))) (command ((name . "itemgroup") (type . "environment") (generated . "yes") (file . "core-itm.tex")) (sequence nil (variable ((value . "itemgroup")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2") (optional . "yes") (list . "yes")) (constant ((type . "a")) "") (constant ((type . "A")) "") (constant ((type . "KA")) "") (constant ((type . "n")) "") (constant ((type . "N")) "") (constant ((type . "m")) "") (constant ((type . "r")) "") (constant ((type . "R")) "") (constant ((type . "KR")) "") (constant ((type . "cd:number")) "") (constant ((type . "continue")) "") (constant ((type . "standard") (default . "yes")) "") (constant ((type . "broad")) "") (constant ((type . "serried")) "") (constant ((type . "packed")) "") (constant ((type . "stopper")) "") (constant ((type . "joinedup")) "") (constant ((type . "atmargin")) "") (constant ((type . "inmargin")) "") (constant ((type . "intro")) "") (constant ((type . "columns")) "") (constant ((type . "text")) "") (constant ((type . "paragraph")) "") (constant ((type . "repeat")) "")) (assignments ((n . "3") (optional . "yes") (list . "yes")) (inherit ((name . "setupitemgroup") (n . "4")) "")))) (command ((name . "item") (file . "core-itm.tex")) (sequence nil (string ((value . "item")) "")) (arguments nil (reference ((n . "1") (optional . "yes") (list . "yes")) ""))) (command ((name . "but")) (sequence nil (string ((value . "but")) "")) (arguments nil (reference ((n . "1") (interactive . "exclusive")) ""))) (command ((name . "its")) (sequence nil (string ((value . "its")) "")) (arguments nil (reference ((n . "1") (optional . "yes") (list . "yes")) ""))) (command ((name . "ran")) (sequence nil (string ((value . "ran")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "head")) (sequence nil (string ((value . "head")) "")) (arguments nil (reference ((n . "1") (optional . "yes") (list . "yes")) ""))) (command ((name . "mar")) (sequence nil (string ((value . "mar")) "")) (arguments nil (reference ((n . "1") (optional . "yes") (list . "yes")) "") (content ((n . "2")) ""))) (command ((name . "sub")) (sequence nil (string ((value . "sub")) "")) (arguments nil (reference ((n . "1") (optional . "yes") (list . "yes")) ""))) (command ((name . "sym") (file . "core-itm.tex")) (sequence nil (string ((value . "sym")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "nop")) (sequence nil (string ((value . "nop")) ""))) (command ((name . "defineregister") (file . "core-reg.tex")) (sequence nil (string ((value . "defineregister")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:singular")) "")) (keywords ((n . "2")) (constant ((type . "cd:plural")) "")))) (command ((name . "setupregister") (file . "core-reg.tex")) (sequence nil (string ((value . "setupregister")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:singular")) "")) (keywords ((n . "2") (optional . "yes")) (constant ((type . "cd:name")) "")) (assignments ((n . "3") (list . "yes")) (parameter ((name . "n")) (constant ((type . "cd:number")) "")) (parameter ((name . "balance")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "align")) (resolve ((name . "align")) "")) (parameter ((name . "style")) (resolve ((name . "style")) "")) (parameter ((name . "pagestyle")) (resolve ((name . "style")) "")) (parameter ((name . "textstyle")) (resolve ((name . "style")) "")) (parameter ((name . "indicator")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "coupling")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "cd:sectionnumber")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "criterium")) (constant ((type . "cd:section")) "") (constant ((type . "local")) "") (constant ((type . "all")) "")) (parameter ((name . "distance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "symbol")) (constant ((type . "1")) "") (constant ((type . "2")) "") (constant ((type . "...")) "") (constant ((type . "n")) "") (constant ((type . "a")) "") (constant ((type . "...")) "") (constant ((type . "none")) "")) (parameter ((name . "interaction")) (constant ((type . "pagenumber")) "") (constant ((type . "cd:text")) "")) (parameter ((name . "expansion")) (constant ((type . "yes")) "") (constant ((type . "no")) "") (constant ((type . "command")) "")) (parameter ((name . "referencing")) (constant ((type . "on")) "") (constant ((type . "off")) "")) (parameter ((name . "command")) (constant ((type . "cd:oneargument")) "")) (parameter ((name . "location")) (constant ((type . "left")) "") (constant ((type . "middle")) "") (constant ((type . "right")) "")) (parameter ((name . "maxwidth")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "unknownreference")) (constant ((type . "empty")) "") (constant ((type . "none")) "")) (parameter ((name . "alternative")) (constant ((type . "a")) "") (constant ((type . "b")) "") (constant ((type . "A")) "") (constant ((type . "B")) "")) (parameter ((name . "prefix")) (constant ((type . "both")) "") (constant ((type . "first")) "") (constant ((type . "none")) "")) (parameter ((name . "compress")) (constant ((type . "no")) "") (constant ((type . "yes")) "")) (parameter ((name . "deeptextcommand")) (constant ((type . "cd:oneargument")) ""))))) (command ((name . "register") (generated . "yes") (file . "core-reg.tex")) (sequence nil (variable ((value . "register")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "cd:text")) "")) (index ((n . "2") (list . "yes")) ""))) (command ((name . "startregister") (generated . "yes") (file . "core-reg.tex")) (sequence nil (string ((value . "start")) "") (variable ((value . "register")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "cd:text")) "")) (index ((n . "2") (list . "yes")) ""))) (command ((name . "writetoregister") (file . "core-reg.tex")) (sequence nil (string ((value . "writetoregister")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:singular")) "")) (keywords ((n . "2") (optional . "yes")) (constant ((type . "cd:text")) "")) (index ((n . "3") (list . "yes")) ""))) (command ((name . "coupledregister") (generated . "yes")) (sequence nil (string ((value . "coupled")) "") (variable ((value . "register")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "cd:text")) "")) (index ((n . "2")) ""))) (command ((name . "coupleregister") (file . "core-reg.tex")) (sequence nil (string ((value . "coupleregister")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")))) (command ((name . "placeregister") (variant . "1") (file . "core-reg.tex")) (sequence nil (string ((value . "placeregister")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (optional . "yes") (list . "yes")) (inherit ((name . "setupregister") (n . "3")) "")))) (command ((name . "seeregister") (generated . "yes")) (sequence nil (string ((value . "see")) "") (variable ((value . "register")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "cd:text")) "")) (content ((n . "2")) "") (index ((n . "3") (list . "yes")) ""))) (command ((name . "completeregister") (generated . "yes") (file . "core-reg.tex")) (sequence nil (string ((value . "complete")) "") (variable ((value . "register")) "")) (arguments nil (assignments ((n . "1") (interactive . "yes") (optional . "yes") (list . "yes")) (inherit ((name . "setupregister") (n . "3")) "")))) (command ((name . "placeregister") (variant . "2") (generated . "yes") (file . "core-reg.tex")) (sequence nil (string ((value . "place")) "") (variable ((value . "register")) "")) (arguments nil (assignments ((n . "1") (interactive . "yes") (optional . "yes") (list . "yes")) (inherit ((name . "setupregister") (n . "3")) "")))) (command ((name . "definesynonyms") (file . "core-syn.tex")) (sequence nil (string ((value . "definesynonyms")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:singular")) "")) (keywords ((n . "2")) (constant ((type . "cd:plural")) "")) (keywords ((n . "3")) (constant ((type . "cd:command")) "")) (keywords ((n . "4") (optional . "yes")) (constant ((type . "cd:command")) "")))) (command ((name . "setupsynonyms") (file . "core-syn.tex")) (sequence nil (string ((value . "setupsynonyms")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "textstyle")) (resolve ((name . "style")) "")) (parameter ((name . "synonymstyle")) (resolve ((name . "style")) "")) (parameter ((name . "location")) (constant ((type . "left")) "") (constant ((type . "right")) "") (constant ((type . "top")) "") (constant ((type . "serried")) "") (constant ((type . "inmargin")) "") (constant ((type . "inleft")) "") (constant ((type . "inright")) "")) (parameter ((name . "width")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "state")) (constant ((type . "start")) "") (constant ((type . "stop")) "")) (parameter ((name . "criterium")) (constant ((type . "all")) "") (constant ((type . "used")) "")) (parameter ((name . "conversion")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "expansion")) (constant ((type . "yes")) "") (constant ((type . "no")) "") (constant ((type . "command")) "")) (parameter ((name . "command")) (constant ((type . "cd:threearguments")) ""))))) (command ((name . "synonym") (generated . "yes")) (sequence nil (variable ((value . "synonym")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "cd:text")) "")) (content ((n . "2")) "") (content ((n . "3")) ""))) (command ((name . "completelistofsynonyms") (generated . "yes")) (sequence nil (string ((value . "completelistof")) "") (variable ((value . "synonyms")) ""))) (command ((name . "placelistofsynonyms") (generated . "yes")) (sequence nil (string ((value . "placelistof")) "") (variable ((value . "synonyms")) ""))) (command ((name . "loadsynonyms") (generated . "yes")) (sequence nil (string ((value . "load")) "") (variable ((value . "synonyms")) ""))) (command ((name . "definesorting") (file . "core-syn.tex")) (sequence nil (string ((value . "definesorting")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:singular")) "")) (keywords ((n . "2")) (constant ((type . "cd:plural")) "")) (keywords ((n . "3") (optional . "yes")) (constant ((type . "cd:command")) "")))) (command ((name . "setupsorting") (file . "core-syn.tex")) (sequence nil (string ((value . "setupsorting")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) "")) (parameter ((name . "command")) (constant ((type . "cd:oneargument")) "")) (parameter ((name . "state")) (constant ((type . "start")) "") (constant ((type . "stop")) "")) (parameter ((name . "criterium")) (constant ((type . "all")) "") (constant ((type . "used")) "")) (parameter ((name . "style")) (resolve ((name . "style")) "")) (parameter ((name . "expansion")) (constant ((type . "yes")) "") (constant ((type . "no")) "") (constant ((type . "command")) ""))))) (command ((name . "sort") (generated . "yes")) (sequence nil (variable ((value . "sort")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:text")) "")) (content ((n . "2")) ""))) (command ((name . "completelistofsorts") (generated . "yes")) (sequence nil (string ((value . "completelistof")) "") (variable ((value . "sorts")) ""))) (command ((name . "placelistofsorts") (generated . "yes")) (sequence nil (string ((value . "placelistof")) "") (variable ((value . "sorts")) ""))) (command ((name . "loadsorts") (generated . "yes")) (sequence nil (string ((value . "load")) "") (variable ((value . "sorts")) ""))) (command ((name . "definemakeup") (file . "page-mak.tex")) (sequence nil (string ((value . "definemakeup")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (inherit ((name . "setupmakeup") (n . "2")) "")))) (command ((name . "makeup") (type . "environment")) (sequence nil (string ((value . "makeup")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (optional . "yes") (list . "yes")) (inherit ((name . "setupmakeup") (n . "2")) "")))) (command ((name . "setupmakeup") (file . "page-mak.tex")) (sequence nil (string ((value . "setupmakeup")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "width")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "height")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "page")) (constant ((type . "left")) "") (constant ((type . "yes")) "") (constant ((type . "right")) "")) (parameter ((name . "commands")) (constant ((type . "cd:command")) "")) (parameter ((name . "doublesided")) (constant ((type . "yes")) "") (constant ((type . "no")) "") (constant ((type . "empty")) "")) (parameter ((name . "headerstate")) (constant ((type . "normal")) "") (constant ((type . "stop")) "") (constant ((type . "start")) "") (constant ((type . "empty")) "") (constant ((type . "none")) "") (constant ((type . "nomarking")) "")) (parameter ((name . "footerstate")) (constant ((type . "normal")) "") (constant ((type . "stop")) "") (constant ((type . "start")) "") (constant ((type . "empty")) "") (constant ((type . "none")) "") (constant ((type . "nomarking")) "")) (parameter ((name . "textstate")) (constant ((type . "normal")) "") (constant ((type . "stop")) "") (constant ((type . "start")) "") (constant ((type . "empty")) "") (constant ((type . "none")) "") (constant ((type . "nomarking")) "")) (parameter ((name . "topstate")) (constant ((type . "stop")) "") (constant ((type . "start")) "")) (parameter ((name . "bottomstate")) (constant ((type . "stop")) "") (constant ((type . "start")) "")) (parameter ((name . "pagestate")) (constant ((type . "stop")) "") (constant ((type . "start")) "")) (parameter ((name . "color")) (constant ((type . "cd:name")) ""))))) (command ((name . "namemakeup") (type . "environment") (generated . "yes")) (sequence nil (variable ((value . "name")) "") (string ((value . "makeup")) ""))) (command ((name . "version")) (sequence nil (string ((value . "version")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "final") (default . "yes")) "") (constant ((type . "concept")) "") (constant ((type . "temporary")) "")))) (command ((name . "currentdate")) (sequence nil (string ((value . "currentdate")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (inherit ((name . "date") (n . "2")) "")))) (command ((name . "date") (file . "core-con.tex")) (sequence nil (string ((value . "date")) "")) (arguments nil (assignments ((n . "1") (optional . "yes") (list . "yes")) (parameter ((name . "d")) (constant ((type . "cd:number")) "")) (parameter ((name . "m")) (constant ((type . "cd:number")) "")) (parameter ((name . "y")) (constant ((type . "cd:number")) ""))) (keywords ((n . "2") (optional . "yes") (list . "yes")) (constant ((type . "day")) "") (constant ((type . "month")) "") (constant ((type . "year")) "") (constant ((type . "weekday")) "") (constant ((type . "d")) "") (constant ((type . "m")) "") (constant ((type . "y")) "") (constant ((type . "w")) "") (constant ((type . "dd")) "") (constant ((type . "mm")) "") (constant ((type . "yy")) "") (constant ((type . "space")) "") (constant ((type . "--")) "") (constant ((type . "day+")) "") (constant ((type . "d+")) "") (constant ((type . "dd+")) "") (constant ((type . "referral")) "") (constant ((type . "cd:text")) "")))) (command ((name . "referraldate") (file . "core-mis.tex")) (sequence nil (string ((value . "referraldate")) ""))) (command ((name . "indenting") (file . "core-spa.tex")) (sequence nil (string ((value . "indenting")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (resolve ((name . "indenting")) "")))) (command ((name . "noindenting") (file . "core-spa.tex")) (sequence nil (string ((value . "noindenting")) ""))) (command ((name . "blank") (file . "core-spa.tex")) (sequence nil (string ((value . "blank")) "")) (arguments nil (keywords ((n . "1") (optional . "yes") (list . "yes")) (constant ((type . "small")) "") (constant ((type . "medium")) "") (constant ((type . "big") (default . "yes")) "") (constant ((type . "nowhite")) "") (constant ((type . "back")) "") (constant ((type . "white")) "") (constant ((type . "disable")) "") (constant ((type . "force")) "") (constant ((type . "reset")) "") (constant ((type . "line")) "") (constant ((type . "halfline")) "") (constant ((type . "cd:formula")) "") (constant ((type . "fixed")) "") (constant ((type . "flexible")) "") (constant ((type . "none")) "") (constant ((type . "always")) "") (constant ((type . "outer")) "") (constant ((type . "joinedup")) "")))) (command ((name . "packed") (type . "environment") (file . "core-spa.tex")) (sequence nil (string ((value . "packed")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "blank")) "")))) (command ((name . "unpacked") (type . "environment")) (sequence nil (string ((value . "unpacked")) ""))) (command ((name . "linecorrection") (type . "environment")) (sequence nil (string ((value . "linecorrection")) ""))) (command ((name . "correctwhitespace") (file . "core-spa.tex")) (sequence nil (string ((value . "correctwhitespace")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "postponing") (type . "environment")) (sequence nil (string ((value . "postponing")) ""))) (command ((name . "local") (type . "environment")) (sequence nil (string ((value . "local")) ""))) (command ((name . "narrower") (type . "environment")) (sequence nil (string ((value . "narrower")) "")) (arguments nil (keywords ((n . "1") (optional . "yes") (list . "yes")) (constant ((type . "left")) "") (constant ((type . "middle") (default . "yes")) "") (constant ((type . "right")) "") (constant ((type . "-left")) "") (constant ((type . "-middle")) "") (constant ((type . "-right")) "") (constant ((type . "-none")) "")))) (command ((name . "hiding") (type . "environment")) (sequence nil (string ((value . "hiding")) ""))) (command ((name . "setupalign") (file . "core-spa.tex")) (sequence nil (string ((value . "setupalign")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "width")) "") (constant ((type . "left")) "") (constant ((type . "right")) "") (constant ((type . "middle")) "") (constant ((type . "inner")) "") (constant ((type . "outer")) "") (constant ((type . "wide")) "") (constant ((type . "broad")) "") (constant ((type . "height")) "") (constant ((type . "bottom")) "") (constant ((type . "line")) "") (constant ((type . "reset")) "") (constant ((type . "hanging")) "") (constant ((type . "nothanging")) "") (constant ((type . "hyphenated")) "") (constant ((type . "nothyphenated")) "") (constant ((type . "lesshyphenation")) "") (constant ((type . "morehyphenation")) "") (constant ((type . "new")) "") (constant ((type . "old")) "") (constant ((type . "normal")) "") (constant ((type . "yes")) "") (constant ((type . "no")) "") (constant ((type . "flushleft")) "") (constant ((type . "flushright")) "") (constant ((type . "flushouter")) "") (constant ((type . "flushinner")) "") (constant ((type . "center")) "") (constant ((type . "hz")) "") (constant ((type . "nohz")) "") (constant ((type . "spacing")) "") (constant ((type . "nospacing")) "") (constant ((type . "tolerant")) "") (constant ((type . "verytolerant")) "") (constant ((type . "stretch")) "") (constant ((type . "lefttoright")) "") (constant ((type . "righttoleft")) "")))) (command ((name . "alignment") (type . "environment") (file . "core-spa.tex")) (sequence nil (string ((value . "alignment")) "")) (arguments nil (keywords ((n . "1") (optional . "yes") (list . "yes")) (inherit ((name . "setupalign") (n . "1")) "")))) (command ((name . "setupspacing")) (sequence nil (string ((value . "setupspacing")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "broad")) "") (constant ((type . "packed")) "")))) (command ((name . "setuptolerance") (file . "core-spa.tex")) (sequence nil (string ((value . "setuptolerance")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "horizontal")) "") (constant ((type . "vertical")) "") (constant ((type . "stretch")) "") (constant ((type . "space")) "") (constant ((type . "verystrict") (default . "yes")) "") (constant ((type . "strict")) "") (constant ((type . "tolerant")) "") (constant ((type . "verytolerant")) "")))) (command ((name . "pagetype") (file . "page-ini.tex")) (sequence nil (string ((value . "pagetype")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")))) (command ((name . "processpage") (file . "page-ini.tex")) (sequence nil (string ((value . "processpage")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "cd:name")) "")) (keywords ((n . "2")) (constant ((type . "yes") (default . "yes")) "") (constant ((type . "no")) "")))) (command ((name . "couplepage") (file . "page-ini.tex")) (sequence nil (string ((value . "couplepage")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "option")) (constant ((type . "doublesided")) "")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) ""))))) (command ((name . "position") (file . "page-lyr.tex")) (sequence nil (string ((value . "position")) "")) (arguments nil (position ((n . "1") (list . "yes")) "") (content ((n . "2")) ""))) (command ((name . "setupscreens") (file . "core-rul.tex")) (sequence nil (string ((value . "setupscreens")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "method")) (constant ((type . "dot")) "") (constant ((type . "rule")) "") (constant ((type . "external")) "")) (parameter ((name . "resolution")) (constant ((type . "cd:number")) "")) (parameter ((name . "factor")) (constant ((type . "cd:number")) "")) (parameter ((name . "screen")) (constant ((type . "cd:number")) ""))))) (command ((name . "setupbackgrounds") (file . "page-bck.tex")) (sequence nil (string ((value . "setupbackgrounds")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "top")) "") (constant ((type . "header")) "") (constant ((type . "cd:text")) "") (constant ((type . "footer")) "") (constant ((type . "bottom")) "") (constant ((type . "page")) "") (constant ((type . "paper")) "") (constant ((type . "leftpage")) "") (constant ((type . "rightpage")) "")) (keywords ((n . "2") (optional . "yes") (list . "yes")) (constant ((type . "leftedge")) "") (constant ((type . "leftmargin")) "") (constant ((type . "cd:text")) "") (constant ((type . "rightmargin")) "") (constant ((type . "rightedge")) "")) (assignments ((n . "3") (list . "yes")) (parameter ((name . "state")) (constant ((type . "start")) "") (constant ((type . "stop")) "") (constant ((type . "cd:repeat")) "")) (inherit ((name . "setupframed") (n . "2")) "")))) (command ((name . "buffer") (type . "environment") (generated . "yes") (file . "core-buf.tex")) (sequence nil (variable ((value . "buffer")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "cd:name")) "")))) (command ((name . "buffer") (type . "environment") (file . "core-buf.tex")) (sequence nil (string ((value . "buffer")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "cd:name")) "")))) (command ((name . "getbuffer")) (sequence nil (string ((value . "getbuffer")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "cd:name")) "")))) (command ((name . "typebuffer") (file . "core-buf.tex")) (sequence nil (string ((value . "typebuffer")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")))) (command ((name . "definebuffer") (file . "core-buf.tex")) (sequence nil (string ((value . "definebuffer")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")))) (command ((name . "setupbuffer") (file . "core-buf.tex")) (sequence nil (string ((value . "setupbuffer")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "paragraph")) (constant ((type . "cd:number")) "")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) ""))))) (command ((name . "defineblock") (file . "core-buf.tex")) (sequence nil (string ((value . "defineblock")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")))) (command ((name . "nomoreblocks") (file . "core-buf.tex")) (sequence nil (string ((value . "nomoreblocks")) ""))) (command ((name . "hideblocks") (file . "core-buf.tex")) (sequence nil (string ((value . "hideblocks")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "cd:name")) "")) (keywords ((n . "2") (optional . "yes") (list . "yes")) (constant ((type . "cd:name")) "")))) (command ((name . "keepblocks") (file . "core-buf.tex")) (sequence nil (string ((value . "keepblocks")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "cd:name")) "")) (keywords ((n . "2") (optional . "yes") (list . "yes")) (constant ((type . "all")) "") (constant ((type . "cd:name")) "")))) (command ((name . "useblocks") (file . "core-buf.tex")) (sequence nil (string ((value . "useblocks")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "cd:name")) "")) (keywords ((n . "2") (optional . "yes") (list . "yes")) (constant ((type . "cd:name")) "")))) (command ((name . "processblocks") (file . "core-buf.tex")) (sequence nil (string ((value . "processblocks")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "cd:name")) "")) (keywords ((n . "2") (optional . "yes") (list . "yes")) (constant ((type . "cd:name")) "")))) (command ((name . "bypassblocks") (file . "core-buf.tex")) (sequence nil (string ((value . "bypassblocks")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "cd:name")) "")) (keywords ((n . "2") (optional . "yes") (list . "yes")) (constant ((type . "cd:name")) "")))) (command ((name . "forceblocks")) (sequence nil (string ((value . "forceblocks")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "cd:name")) "")) (keywords ((n . "2") (optional . "yes") (list . "yes")) (constant ((type . "cd:name")) "")))) (command ((name . "selectblocks") (file . "core-buf.tex")) (sequence nil (string ((value . "selectblocks")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "cd:name")) "")) (keywords ((n . "2") (optional . "yes") (list . "yes")) (constant ((type . "cd:name")) "")) (assignments ((n . "3") (optional . "yes")) (parameter ((name . "criterium")) (constant ((type . "all")) "") (constant ((type . "cd:section")) ""))))) (command ((name . "setupblock") (file . "core-buf.tex")) (sequence nil (string ((value . "setupblock")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) "")) (parameter ((name . "inner")) (constant ((type . "cd:command")) "")) (parameter ((name . "style")) (resolve ((name . "style")) "")) (parameter ((name . "file")) (constant ((type . "cd:file")) ""))))) (command ((name . "formula") (type . "environment") (generated . "yes")) (sequence nil (variable ((value . "formula")) ""))) (command ((name . "mathematics") (file . "supp-mat.tex")) (sequence nil (string ((value . "mathematics")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "placeformula") (file . "core-mat.tex")) (sequence nil (string ((value . "placeformula")) "")) (arguments nil (reference ((n . "1") (optional . "yes") (list . "yes")) "") (content ((n . "2") (optional . "yes")) "") (displaymath ((n . "3")) ""))) (command ((name . "placesubformula") (file . "core-mat.tex")) (sequence nil (string ((value . "placesubformula")) "")) (arguments nil (reference ((n . "1") (optional . "yes") (list . "yes")) "") (content ((n . "2") (optional . "yes")) "") (displaymath ((n . "3")) ""))) (command ((name . "placefloat") (generated . "yes") (file . "page-flt.tex")) (sequence nil (string ((value . "place")) "") (variable ((value . "float")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "left")) "") (constant ((type . "right")) "") (constant ((type . "here") (default . "yes")) "") (constant ((type . "top")) "") (constant ((type . "bottom")) "") (constant ((type . "inleft")) "") (constant ((type . "inright")) "") (constant ((type . "inmargin")) "") (constant ((type . "margin")) "") (constant ((type . "leftmargin")) "") (constant ((type . "rightmargin")) "") (constant ((type . "leftedge")) "") (constant ((type . "rightedge")) "") (constant ((type . "innermargin")) "") (constant ((type . "outermargin")) "") (constant ((type . "inneredge")) "") (constant ((type . "outeredge")) "") (constant ((type . "inner")) "") (constant ((type . "outer")) "") (constant ((type . "line")) "") (constant ((type . "high")) "") (constant ((type . "low")) "") (constant ((type . "fit")) "") (constant ((type . "page")) "") (constant ((type . "leftpage")) "") (constant ((type . "rightpage")) "") (constant ((type . "opposite")) "") (constant ((type . "always")) "") (constant ((type . "auto")) "") (constant ((type . "force")) "") (constant ((type . "tall")) "") (constant ((type . "reset")) "") (constant ((type . "line")) "") (constant ((type . "height")) "") (constant ((type . "depth")) "") (constant ((type . "split")) "") (constant ((type . "90")) "") (constant ((type . "180")) "") (constant ((type . "270")) "")) (reference ((n . "2") (optional . "yes") (list . "yes")) "") (content ((n . "3")) "") (content ((n . "4")) ""))) (command ((name . "reservefloat") (generated . "yes")) (sequence nil (string ((value . "reserve")) "") (variable ((value . "float")) "")) (arguments nil (assignments ((n . "1") (optional . "yes") (list . "yes")) (parameter ((name . "height")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "width")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "frame")) (constant ((type . "on")) "") (constant ((type . "off")) ""))) (keywords ((n . "2") (optional . "yes")) (constant ((type . "cd:text")) "")) (reference ((n . "3") (optional . "yes") (list . "yes")) "") (content ((n . "4")) ""))) (command ((name . "definefloat") (file . "page-flt.tex")) (sequence nil (string ((value . "definefloat")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:singular")) "")) (keywords ((n . "2")) (constant ((type . "cd:plural")) "")))) (command ((name . "setupfloat") (file . "page-flt.tex")) (sequence nil (string ((value . "setupfloat")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "height")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "width")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "maxheight")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "maxwidth")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "minwidth")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "default")) (constant ((type . "cd:name")) "")) (parameter ((name . "pageboundaries")) (constant ((type . "cd:list")) "")) (parameter ((name . "leftmargindistance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "rightmargindistance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "location")) (constant ((type . "left")) "") (constant ((type . "middle")) "") (constant ((type . "right")) "")) (inherit ((name . "setupframed") (n . "2")) "")))) (command ((name . "floattext") (type . "environment") (generated . "yes")) (sequence nil (variable ((value . "float")) "") (string ((value . "text")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "left")) "") (constant ((type . "right")) "") (constant ((type . "high")) "") (constant ((type . "middle")) "") (constant ((type . "low")) "") (constant ((type . "offset")) "") (constant ((type . "tall")) "")) (reference ((n . "2") (optional . "yes")) "") (content ((n . "3")) "") (content ((n . "4")) ""))) (command ((name . "placelistoffloats") (generated . "yes")) (sequence nil (string ((value . "placelistof")) "") (variable ((value . "floats")) ""))) (command ((name . "completelistoffloats") (generated . "yes")) (sequence nil (string ((value . "completelistof")) "") (variable ((value . "floats")) ""))) (command ((name . "referral") (file . "core-mis.tex")) (sequence nil (string ((value . "referral")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "bet")) (constant ((type . "cd:text")) "")) (parameter ((name . "ken")) (constant ((type . "cd:text")) "")) (parameter ((name . "dat")) (constant ((type . "cd:text")) "")) (parameter ((name . "van")) (constant ((type . "cd:text")) "")) (parameter ((name . "aan")) (constant ((type . "cd:text")) "")) (parameter ((name . "ref")) (constant ((type . "cd:text")) ""))))) (command ((name . "selectpaper")) (sequence nil (string ((value . "selectpaper")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "family")) (constant ((type . "1")) "") (constant ((type . "2")) ""))))) (command ((name . "couplepaper")) (sequence nil (string ((value . "couplepaper")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")))) (command ((name . "chem") (file . "core-mis.tex")) (sequence nil (string ((value . "chem")) "")) (arguments nil (content ((n . "1")) "") (content ((n . "2")) "") (content ((n . "3")) ""))) (command ((name . "fraction") (file . "core-mis.tex")) (sequence nil (string ((value . "fraction")) "")) (arguments nil (content ((n . "1")) "") (content ((n . "2")) ""))) (command ((name . "periods") (file . "core-mis.tex")) (sequence nil (string ((value . "periods")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:number")) "")))) (command ((name . "items")) (sequence nil (string ((value . "items")) "")) (arguments nil (assignments ((n . "1") (optional . "yes") (list . "yes")) (inherit ((name . "setupitems") (n . "1")) "")) (content ((n . "2") (list . "yes")) ""))) (command ((name . "setupitems") (file . "core-mis.tex")) (sequence nil (string ((value . "setupitems")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "location")) (constant ((type . "left")) "") (constant ((type . "right")) "") (constant ((type . "inmargin")) "") (constant ((type . "top")) "") (constant ((type . "bottom")) "")) (parameter ((name . "symbol")) (constant ((type . "1")) "") (constant ((type . "2")) "") (constant ((type . "...")) "") (constant ((type . "n")) "") (constant ((type . "a")) "") (constant ((type . "...")) "") (constant ((type . "cd:text")) "") (constant ((type . "none")) "")) (parameter ((name . "width")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "n")) (constant ((type . "cd:number")) "") (constant ((type . "unknown")) "")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "inbetween")) (constant ((type . "cd:command")) "")) (parameter ((name . "align")) (resolve ((name . "align")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) ""))))) (command ((name . "quotation") (type . "environment") (file . "core-mis.tex")) (sequence nil (string ((value . "quotation")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "left")) "") (constant ((type . "middle") (default . "yes")) "") (constant ((type . "right")) "")))) (command ((name . "quotation") (file . "core-mis.tex")) (sequence nil (string ((value . "quotation")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "quote") (file . "core-mis.tex")) (sequence nil (string ((value . "quote")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "setupquote") (file . "core-mis.tex")) (sequence nil (string ((value . "setupquote")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) "")) (parameter ((name . "style")) (resolve ((name . "style")) "")) (parameter ((name . "color")) (constant ((type . "cd:name")) "")) (parameter ((name . "location")) (constant ((type . "cd:text")) "") (constant ((type . "margin")) ""))))) (command ((name . "defineparagraphs") (file . "core-mis.tex")) (sequence nil (string ((value . "defineparagraphs")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "n")) (constant ((type . "cd:number")) "")) (parameter ((name . "rule")) (constant ((type . "on")) "") (constant ((type . "off")) "")) (parameter ((name . "height")) (constant ((type . "fit")) "") (constant ((type . "cd:dimension")) "")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) "")) (parameter ((name . "inner")) (constant ((type . "cd:command")) "")) (parameter ((name . "distance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "tolerance")) (constant ((type . "verystrict")) "") (constant ((type . "strict")) "") (constant ((type . "tolerant")) "") (constant ((type . "verytolerant")) "") (constant ((type . "stretch")) "")) (parameter ((name . "align")) (resolve ((name . "align")) ""))))) (command ((name . "paragraph") (generated . "yes")) (sequence nil (variable ((value . "paragraph")) ""))) (command ((name . "paragraph") (type . "environment") (generated . "yes")) (sequence nil (variable ((value . "paragraph")) ""))) (command ((name . "setupparagraphs") (file . "core-mis.tex")) (sequence nil (string ((value . "setupparagraphs")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2") (optional . "yes")) (constant ((type . "cd:number")) "") (constant ((type . "each")) "")) (assignments ((n . "3") (list . "yes")) (parameter ((name . "style")) (resolve ((name . "style")) "")) (parameter ((name . "width")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "height")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "align")) (resolve ((name . "align")) "")) (parameter ((name . "tolerance")) (constant ((type . "verystrict")) "") (constant ((type . "strict")) "") (constant ((type . "tolerant")) "") (constant ((type . "verytolerant")) "") (constant ((type . "stretch")) "")) (parameter ((name . "distance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) "")) (parameter ((name . "inner")) (constant ((type . "cd:command")) "")) (parameter ((name . "command")) (constant ((type . "cd:command")) "")) (parameter ((name . "rule")) (constant ((type . "on")) "") (constant ((type . "off")) ""))))) (command ((name . "setuptab") (file . "core-mis.tex")) (sequence nil (string ((value . "setuptab")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "sample")) (constant ((type . "cd:text")) "")) (parameter ((name . "width")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "headstyle")) (resolve ((name . "style")) "")) (parameter ((name . "location")) (constant ((type . "left")) "") (constant ((type . "right")) ""))))) (command ((name . "tab")) (sequence nil (string ((value . "tab")) "")) (arguments nil (content ((n . "1")) "") (nothing ((n . "2")) ""))) (command ((name . "document") (type . "environment")) (sequence nil (string ((value . "document")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")))) (command ((name . "labels")) (sequence nil (string ((value . "labels")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")))) (command ((name . "definetabulate") (file . "core-tbl.tex")) (sequence nil (string ((value . "definetabulate")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2") (optional . "yes")) (constant ((type . "cd:name")) "")) (keywords ((n . "3")) (constant ((type . "cd:text")) "")))) (command ((name . "tabulate") (type . "environment") (generated . "yes")) (sequence nil (variable ((value . "tabulate")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "cd:text")) "")) (assignments ((n . "2") (optional . "yes") (list . "yes")) (inherit ((name . "setupexternalfigures") (n . "1")) "")))) (command ((name . "setuptabulate") (file . "core-tbl.tex")) (sequence nil (string ((value . "setuptabulate")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "unit")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "indenting")) (resolve ((name . "indenting")) "")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) "")) (parameter ((name . "inner")) (constant ((type . "cd:command")) "")) (parameter ((name . "EQ")) (constant ((type . "cd:text")) "")) (parameter ((name . "rulecolor")) (constant ((type . "cd:name")) "")) (parameter ((name . "align")) (resolve ((name . "align")) "")) (parameter ((name . "rulethickness")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "distance")) (constant ((type . "blank")) "") (constant ((type . "grid")) "") (constant ((type . "depth")) "") (constant ((type . "cd:dimension")) "") (constant ((type . "small")) "") (constant ((type . "medium")) "") (constant ((type . "big")) "") (constant ((type . "none")) "")) (parameter ((name . "bodyfont")) (resolve ((name . "bodyfont")) "")) (parameter ((name . "rule")) (constant ((type . "normal")) "") (constant ((type . "line")) "")) (parameter ((name . "split")) (constant ((type . "yes")) "") (constant ((type . "no")) ""))))) (command ((name . "setuptables") (file . "core-tab.tex")) (sequence nil (string ((value . "setuptables")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "distance")) (constant ((type . "small")) "") (constant ((type . "medium")) "") (constant ((type . "big")) "")) (parameter ((name . "bodyfont")) (resolve ((name . "bodyfont")) "")) (parameter ((name . "HL")) (constant ((type . "cd:number")) "") (constant ((type . "small")) "") (constant ((type . "medium")) "") (constant ((type . "big")) "") (constant ((type . "none")) "")) (parameter ((name . "VL")) (constant ((type . "cd:number")) "") (constant ((type . "small")) "") (constant ((type . "medium")) "") (constant ((type . "big")) "") (constant ((type . "none")) "")) (parameter ((name . "depth")) (constant ((type . "cd:number")) "") (constant ((type . "strut")) "")) (parameter ((name . "height")) (constant ((type . "cd:number")) "") (constant ((type . "strut")) "")) (parameter ((name . "rulethickness")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "rulecolor")) (constant ((type . "cd:name")) "")) (parameter ((name . "align")) (resolve ((name . "align")) "")) (parameter ((name . "commands")) (constant ((type . "cd:command")) "")) (parameter ((name . "align")) (resolve ((name . "align")) "")) (parameter ((name . "background")) (constant ((type . "screen")) "") (constant ((type . "color")) "") (constant ((type . "none")) "")) (parameter ((name . "backgroundscreen")) (constant ((type . "cd:number")) "")) (parameter ((name . "backgroundcolor")) (constant ((type . "cd:name")) "")) (parameter ((name . "bodyfont")) (resolve ((name . "bodyfont")) ""))))) (command ((name . "table") (type . "environment")) (sequence nil (string ((value . "table")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:text")) "") (constant ((type . "cd:name")) "")))) (command ((name . "tables") (type . "environment")) (sequence nil (string ((value . "tables")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:text")) "") (constant ((type . "cd:name")) "")))) (command ((name . "definetabletemplate") (file . "core-tab.tex")) (sequence nil (string ((value . "definetabletemplate")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2")) (constant ((type . "cd:text")) "")) (keywords ((n . "3") (optional . "yes")) (constant ((type . "cd:text")) "")) (keywords ((n . "4") (optional . "yes")) (constant ((type . "cd:text")) "")))) (command ((name . "useexternalfiles") (file . "core-mis.tex")) (sequence nil (string ((value . "useexternalfiles")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "bodyfont")) (resolve ((name . "bodyfont")) "")) (parameter ((name . "file")) (constant ((type . "cd:file")) ""))))) (command ((name . "useexternalfile") (file . "core-mis.tex")) (sequence nil (string ((value . "useexternalfile")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2")) (constant ((type . "cd:name")) "")) (keywords ((n . "3")) (constant ((type . "cd:file")) "")) (assignments ((n . "4") (list . "yes")) (parameter ((name . "bodyfont")) (resolve ((name . "bodyfont")) ""))))) (command ((name . "useexternalfigure") (file . "core-fig.tex")) (sequence nil (string ((value . "useexternalfigure")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "cd:name")) "")) (keywords ((n . "2")) (constant ((type . "cd:file")) "")) (keywords ((n . "3") (optional . "yes")) (constant ((type . "cd:name")) "")) (assignments ((n . "4") (optional . "yes") (list . "yes")) (inherit ((name . "setupexternalfigures") (n . "1")) "")))) (command ((name . "externalfigure") (file . "core-fig.tex")) (sequence nil (string ((value . "externalfigure")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:file")) "")) (assignments ((n . "2") (optional . "yes") (list . "yes")) (inherit ((name . "setupexternalfigures") (n . "1")) "")))) (command ((name . "setupexternalfigures") (file . "core-fig.tex")) (sequence nil (string ((value . "setupexternalfigures")) "")) (arguments nil (assignments ((n . "1")) (parameter ((name . "scale")) (constant ((type . "cd:number")) "")) (parameter ((name . "yscale")) (constant ((type . "cd:number")) "")) (parameter ((name . "yscale")) (constant ((type . "cd:number")) "")) (parameter ((name . "factor")) (constant ((type . "max")) "") (constant ((type . "fit")) "") (constant ((type . "broad")) "")) (parameter ((name . "wfactor")) (constant ((type . "cd:number")) "") (constant ((type . "max")) "") (constant ((type . "broad")) "") (constant ((type . "fit")) "")) (parameter ((name . "hfactor")) (constant ((type . "cd:number")) "") (constant ((type . "max")) "") (constant ((type . "broad")) "") (constant ((type . "fit")) "")) (parameter ((name . "width")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "height")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "frame")) (constant ((type . "on")) "") (constant ((type . "off")) "")) (parameter ((name . "preset")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "display")) (constant ((type . "cd:file")) "")) (parameter ((name . "preview")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "repeat")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "object")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "type")) (constant ((type . "eps")) "") (constant ((type . "mps")) "") (constant ((type . "pdf")) "") (constant ((type . "tif")) "") (constant ((type . "png")) "") (constant ((type . "jpg")) "") (constant ((type . "mov")) "") (constant ((type . "cd:tex")) "")) (parameter ((name . "method")) (constant ((type . "eps")) "") (constant ((type . "mps")) "") (constant ((type . "pdf")) "") (constant ((type . "tif")) "") (constant ((type . "png")) "") (constant ((type . "jpg")) "") (constant ((type . "mov")) "") (constant ((type . "cd:tex")) "")) (parameter ((name . "option")) (constant ((type . "frame")) "") (constant ((type . "empty")) "") (constant ((type . "test")) "")) (parameter ((name . "frames")) (constant ((type . "on")) "") (constant ((type . "off")) "")) (parameter ((name . "ymax")) (constant ((type . "cd:number")) "")) (parameter ((name . "xmax")) (constant ((type . "cd:number")) "")) (parameter ((name . "directory")) (constant ((type . "cd:text")) "")) (parameter ((name . "location")) (constant ((type . "local")) "") (constant ((type . "global")) "") (constant ((type . "default")) "") (constant ((type . "none")) "")) (parameter ((name . "maxwidth")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "maxheight")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "conversion")) (constant ((type . "cd:text")) "")) (parameter ((name . "prefix")) (constant ((type . "cd:text")) "")) (parameter ((name . "interaction")) (constant ((type . "yes")) "") (constant ((type . "no")) ""))))) (command ((name . "showexternalfigures") (file . "core-fig.tex")) (sequence nil (string ((value . "showexternalfigures")) "")) (arguments nil (assignments ((n . "1") (optional . "yes") (list . "yes")) (parameter ((name . "alternative")) (constant ((type . "a")) "") (constant ((type . "b")) "") (constant ((type . "c")) ""))))) (command ((name . "useexternalsoundtrack") (file . "core-fig.tex")) (sequence nil (string ((value . "useexternalsoundtrack")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2")) (constant ((type . "cd:file")) "")))) (command ((name . "name") (file . "syst-gen.tex")) (sequence nil (string ((value . "name")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "legend") (type . "environment")) (sequence nil (string ((value . "legend")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "two")) "")) (tex ((n . "2") (command . "leg")) "") (nothing ((n . "3")) "") (nothing ((n . "4") (separator . "backslash")) "") (nothing ((n . "5") (separator . "backslash")) "") (tex ((n . "6") (separator . "backslash") (command . "leg")) ""))) (command ((name . "fact") (type . "environment")) (sequence nil (string ((value . "fact")) "")) (arguments nil (tex ((n . "1") (command . "fact")) "") (nothing ((n . "2")) "") (nothing ((n . "3") (separator . "backslash")) "") (nothing ((n . "4") (separator . "backslash")) "") (tex ((n . "5") (separator . "backslash") (command . "fact")) ""))) (command ((name . "rotate") (file . "core-mis.tex")) (sequence nil (string ((value . "rotate")) "")) (arguments nil (assignments ((n . "1") (optional . "yes") (list . "yes")) (inherit ((name . "setuprotate") (n . "1")) "")) (content ((n . "2")) ""))) (command ((name . "setuprotate") (file . "core-mis.tex")) (sequence nil (string ((value . "setuprotate")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "rotation")) (constant ((type . "cd:number")) "")) (parameter ((name . "location")) (constant ((type . "normal")) "") (constant ((type . "high")) "") (constant ((type . "fit")) "") (constant ((type . "broad")) "") (constant ((type . "depth")) "")) (inherit ((name . "setupframed") (n . "2")) "")))) (command ((name . "mirror") (file . "core-mis.tex")) (sequence nil (string ((value . "mirror")) "")) (arguments nil (content ((n . "1")) ""))) (command ((name . "scale") (file . "core-mis.tex")) (sequence nil (string ((value . "scale")) "")) (arguments nil (assignments ((n . "1") (optional . "yes") (list . "yes")) (parameter ((name . "sx")) (constant ((type . "cd:number")) "")) (parameter ((name . "sy")) (constant ((type . "cd:number")) ""))) (content ((n . "2")) ""))) (command ((name . "setupcombinations") (file . "core-mis.tex")) (sequence nil (string ((value . "setupcombinations")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "inbetween")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) "")) (parameter ((name . "distance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "height")) (constant ((type . "cd:dimension")) "") (constant ((type . "fit")) "")) (parameter ((name . "width")) (constant ((type . "cd:dimension")) "") (constant ((type . "fit")) "")) (parameter ((name . "location")) (constant ((type . "top")) "") (constant ((type . "middle")) "") (constant ((type . "bottom")) "") (constant ((type . "left")) "") (constant ((type . "right")) "")) (parameter ((name . "align")) (resolve ((name . "align")) "")) (parameter ((name . "style")) (resolve ((name . "style")) "")) (parameter ((name . "color")) (constant ((type . "cd:name")) ""))))) (command ((name . "combination") (type . "environment")) (sequence nil (string ((value . "combination")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:matrix")) "")))) (command ((name . "placesidebyside") (file . "core-mis.tex")) (sequence nil (string ((value . "placesidebyside")) "")) (arguments nil (content ((n . "1")) "") (content ((n . "2")) ""))) (command ((name . "placeontopofeachother") (file . "core-mis.tex")) (sequence nil (string ((value . "placeontopofeachother")) "")) (arguments nil (content ((n . "1")) "") (content ((n . "2")) ""))) (command ((name . "overlay") (type . "environment")) (sequence nil (string ((value . "overlay")) "")) (arguments nil (content ((n . "1")) "") (content ((n . "2")) ""))) (command ((name . "overview") (type . "environment")) (sequence nil (string ((value . "overview")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "cd:name")) "")))) (command ((name . "setupinteractionscreen") (file . "core-int.tex")) (sequence nil (string ((value . "setupinteractionscreen")) "")) (arguments nil (assignments ((n . "1") (interactive . "exclusive") (list . "yes")) (parameter ((name . "width")) (constant ((type . "cd:dimension")) "") (constant ((type . "fit")) "") (constant ((type . "max")) "")) (parameter ((name . "height")) (constant ((type . "cd:dimension")) "") (constant ((type . "fit")) "") (constant ((type . "max")) "")) (parameter ((name . "backspace")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "topspace")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "horoffset")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "veroffset")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "option")) (constant ((type . "max")) "") (constant ((type . "fit")) "") (constant ((type . "doublesided")) "") (constant ((type . "singlesided")) "") (constant ((type . "auto")) "") (constant ((type . "none")) "") (constant ((type . "bookmark")) "")) (parameter ((name . "delay")) (constant ((type . "cd:number")) "") (constant ((type . "none")) ""))))) (command ((name . "screen") (file . "core-int.tex")) (sequence nil (string ((value . "screen")) ""))) (command ((name . "setuppagetransitions") (file . "core-int.tex")) (sequence nil (string ((value . "setuppagetransitions")) "")) (arguments nil (keywords ((n . "1") (optional . "yes") (list . "yes")) (constant ((type . "reset")) "") (constant ((type . "cd:number")) "")))) (command ((name . "setupinteraction") (file . "core-nav.tex")) (sequence nil (string ((value . "setupinteraction")) "")) (arguments nil (assignments ((n . "1") (interactive . "exclusive") (list . "yes")) (parameter ((name . "state")) (constant ((type . "start")) "") (constant ((type . "stop")) "")) (parameter ((name . "menu")) (constant ((type . "on")) "") (constant ((type . "off")) "")) (parameter ((name . "page")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "click")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "split")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "display")) (constant ((type . "new")) "")) (parameter ((name . "openaction")) (constant ((type . "cd:reference")) "")) (parameter ((name . "closeaction")) (constant ((type . "cd:reference")) "")) (parameter ((name . "openpageaction")) (constant ((type . "cd:reference")) "")) (parameter ((name . "closepageaction")) (constant ((type . "cd:reference")) "")) (parameter ((name . "calculate")) (constant ((type . "cd:name")) "")) (parameter ((name . "strut")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "width")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "height")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "depth")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "style")) (resolve ((name . "style")) "")) (parameter ((name . "color")) (constant ((type . "cd:name")) "")) (parameter ((name . "contrastcolor")) (constant ((type . "cd:name")) "")) (parameter ((name . "symbolset")) (constant ((type . "cd:name")) "")) (parameter ((name . "title")) (constant ((type . "cd:text")) "")) (parameter ((name . "subtitle")) (constant ((type . "cd:text")) "")) (parameter ((name . "author")) (constant ((type . "cd:text")) "")) (parameter ((name . "date")) (constant ((type . "cd:text")) "")) (parameter ((name . "keyword")) (constant ((type . "cd:text")) "")) (parameter ((name . "fieldlayer")) (constant ((type . "auto")) "") (constant ((type . "cd:name")) ""))))) (command ((name . "setupinteractionmenu") (file . "core-int.tex")) (sequence nil (string ((value . "setupinteractionmenu")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) "")) (parameter ((name . "inbetween")) (constant ((type . "cd:command")) "")) (parameter ((name . "left")) (constant ((type . "cd:command")) "")) (parameter ((name . "right")) (constant ((type . "cd:command")) "")) (parameter ((name . "middle")) (constant ((type . "cd:command")) "")) (parameter ((name . "state")) (constant ((type . "start")) "") (constant ((type . "stop")) "") (constant ((type . "none")) "") (constant ((type . "local")) "")) (parameter ((name . "style")) (resolve ((name . "style")) "")) (parameter ((name . "color")) (constant ((type . "cd:name")) "")) (parameter ((name . "contrastcolor")) (constant ((type . "cd:name")) "")) (parameter ((name . "distance")) (constant ((type . "overlay")) "") (constant ((type . "cd:dimension")) "")) (parameter ((name . "samepage")) (constant ((type . "yes")) "") (constant ((type . "empty")) "") (constant ((type . "no")) "") (constant ((type . "none")) "")) (parameter ((name . "unknownreference")) (constant ((type . "yes")) "") (constant ((type . "empty")) "") (constant ((type . "no")) "") (constant ((type . "none")) "")) (parameter ((name . "leftoffset")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "rightoffset")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "topoffset")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "bottomoffset")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "position")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (inherit ((name . "setupframed") (n . "2")) "")))) (command ((name . "defineinteractionmenu") (variant . "1") (file . "core-int.tex")) (sequence nil (string ((value . "defineinteractionmenu")) "")) (arguments nil (keywords ((n . "1") (interactive . "exclusive") (list . "yes")) (constant ((type . "left")) "") (constant ((type . "right")) "") (constant ((type . "top")) "") (constant ((type . "bottom")) "") (constant ((type . "cd:name")) "")) (assignments ((n . "2") (optional . "yes") (list . "yes")) (inherit ((name . "setupinteractionmenu") (n . "2")) "")))) (command ((name . "defineinteractionmenu") (variant . "2") (file . "core-int.tex")) (sequence nil (string ((value . "defineinteractionmenu")) "")) (arguments nil (keywords ((n . "1") (interactive . "exclusive")) (constant ((type . "left")) "") (constant ((type . "right")) "") (constant ((type . "top")) "") (constant ((type . "bottom")) "") (constant ((type . "cd:name")) "")) (keywords ((n . "2") (optional . "yes")) (constant ((type . "left")) "") (constant ((type . "right")) "") (constant ((type . "top")) "") (constant ((type . "bottom")) "") (constant ((type . "cd:name")) "")) (assignments ((n . "3") (optional . "yes") (list . "yes")) (inherit ((name . "setupinteractionmenu") (n . "2")) "")))) (command ((name . "interactionmenu") (type . "environment")) (sequence nil (string ((value . "interactionmenu")) "")) (arguments nil (keywords ((n . "1") (interactive . "exclusive")) (constant ((type . "cd:name")) "")))) (command ((name . "disableinteractionmenu") (file . "core-int.tex")) (sequence nil (string ((value . "disableinteractionmenu")) "")) (arguments nil (keywords ((n . "1") (interactive . "exclusive")) (constant ((type . "left")) "") (constant ((type . "right")) "") (constant ((type . "top")) "") (constant ((type . "bottom")) "") (constant ((type . "cd:name")) "")) (reference ((n . "2") (list . "yes")) ""))) (command ((name . "useexternaldocument") (file . "core-ref.tex")) (sequence nil (string ((value . "useexternaldocument")) "")) (arguments nil (keywords ((n . "1") (interactive . "exclusive")) (constant ((type . "cd:name")) "")) (keywords ((n . "2")) (constant ((type . "file")) "")) (keywords ((n . "3")) (constant ((type . "cd:text")) "")))) (command ((name . "useURL") (file . "core-ref.tex")) (sequence nil (string ((value . "useURL")) "")) (arguments nil (keywords ((n . "1") (interactive . "exclusive")) (constant ((type . "cd:name")) "")) (keywords ((n . "2")) (constant ((type . "cd:text")) "")) (keywords ((n . "3")) (constant ((type . "file")) "")) (keywords ((n . "4")) (constant ((type . "cd:text")) "")))) (command ((name . "coupledocument") (file . "core-ref.tex")) (sequence nil (string ((value . "coupledocument")) "")) (arguments nil (keywords ((n . "1") (interactive . "exclusive")) (constant ((type . "cd:name")) "")) (keywords ((n . "2")) (constant ((type . "file")) "")) (keywords ((n . "3")) (constant ((type . "cd:name")) "")))) (command ((name . "from") (file . "core-ref.tex")) (sequence nil (string ((value . "from")) "")) (arguments nil (reference ((n . "1") (interactive . "exclusive")) ""))) (command ((name . "interactionbar")) (sequence nil (string ((value . "interactionbar")) "")) (arguments nil (assignments ((n . "1") (interactive . "exclusive") (list . "yes")) (inherit ((name . "setupinteractionbar") (n . "1")) "")))) (command ((name . "interactionbuttons") (file . "core-ref.tex")) (sequence nil (string ((value . "interactionbuttons")) "")) (arguments nil (assignments ((n . "1") (interactive . "exclusive") (optional . "yes") (list . "yes")) (inherit ((name . "setupinteractionbar") (n . "1")) "")) (keywords ((n . "2") (list . "yes")) (constant ((type . "cd:name")) "")))) (command ((name . "setupinteractionbar") (file . "core-int.tex")) (sequence nil (string ((value . "setupinteractionbar")) "")) (arguments nil (assignments ((n . "1") (interactive . "exclusive") (list . "yes")) (parameter ((name . "state")) (constant ((type . "start")) "") (constant ((type . "stop")) "")) (parameter ((name . "alternative")) (constant ((type . "a")) "") (constant ((type . "b")) "") (constant ((type . "c")) "") (constant ((type . "d")) "") (constant ((type . "e")) "") (constant ((type . "f")) "") (constant ((type . "g")) "")) (parameter ((name . "symbol")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "width")) (constant ((type . "cd:dimension")) "") (constant ((type . "height")) "") (constant ((type . "fit")) "")) (parameter ((name . "height")) (constant ((type . "cd:dimension")) "") (constant ((type . "height")) "") (constant ((type . "fit")) "")) (parameter ((name . "depth")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "color")) (constant ((type . "cd:name")) "")) (parameter ((name . "step")) (constant ((type . "cd:number")) "") (constant ((type . "small")) "") (constant ((type . "medium")) "") (constant ((type . "big")) "")) (inherit ((name . "setupframed") (n . "2")) "")))) (command ((name . "synchronize") (file . "core-int.tex")) (sequence nil (string ((value . "synchronize")) ""))) (command ((name . "synchronization") (type . "environment")) (sequence nil (string ((value . "synchronization")) ""))) (command ((name . "setupsynchronizationbar") (file . "core-int.tex")) (sequence nil (string ((value . "setupsynchronizationbar")) "")) (arguments nil (assignments ((n . "1") (interactive . "exclusive") (list . "yes")) (parameter ((name . "alternative")) (constant ((type . "page")) "") (constant ((type . "local")) "")) (parameter ((name . "width")) (constant ((type . "cd:dimension")) "") (constant ((type . "height")) "") (constant ((type . "fit")) "")) (parameter ((name . "height")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "style")) (resolve ((name . "style")) "")) (parameter ((name . "color")) (constant ((type . "cd:name")) "")) (inherit ((name . "setupframed") (n . "2")) "")))) (command ((name . "synchronizationbar") (file . "core-int.tex")) (sequence nil (string ((value . "synchronizationbar")) "")) (arguments nil (keywords ((n . "1") (interactive . "exclusive")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "alternative")) (constant ((type . "page")) "") (constant ((type . "local")) "")) (inherit ((name . "setupsynchronizationbar") (n . "1")) "")))) (command ((name . "setupsynchronization") (file . "core-int.tex")) (sequence nil (string ((value . "setupsynchronization")) "")) (arguments nil (assignments ((n . "1") (interactive . "exclusive") (list . "yes")) (parameter ((name . "state")) (constant ((type . "start")) "") (constant ((type . "stop")) ""))))) (command ((name . "defineprofile") (file . "core-int.tex")) (sequence nil (string ((value . "defineprofile")) "")) (arguments nil (keywords ((n . "1") (interactive . "exclusive") (list . "yes")) (constant ((type . "cd:name")) "")) (keywords ((n . "2") (list . "yes")) (constant ((type . "cd:name")) "")))) (command ((name . "setupprofiles") (file . "core-int.tex")) (sequence nil (string ((value . "setupprofiles")) "")) (arguments nil (assignments ((n . "1") (interactive . "exclusive") (list . "yes")) (parameter ((name . "option")) (constant ((type . "test")) ""))))) (command ((name . "profile") (type . "environment")) (sequence nil (string ((value . "profile")) "")) (arguments nil (keywords ((n . "1") (interactive . "exclusive") (list . "yes")) (constant ((type . "cd:name")) "")))) (command ((name . "followprofile") (file . "core-int.tex")) (sequence nil (string ((value . "followprofile")) "")) (arguments nil (content ((n . "1") (interactive . "exclusive")) "") (keywords ((n . "2")) (constant ((type . "cd:text")) "")))) (command ((name . "placebookmarks") (file . "core-int.tex")) (sequence nil (string ((value . "placebookmarks")) "")) (arguments nil (keywords ((n . "1") (optional . "yes") (list . "yes")) (constant ((type . "cd:name")) "")) (keywords ((n . "2") (optional . "yes") (list . "yes")) (constant ((type . "cd:name")) "") (constant ((type . "all")) "")) (assignments ((n . "3") (optional . "yes") (list . "yes")) (parameter ((name . "force")) (constant ((type . "yes")) "") (constant ((type . "no")) ""))))) (command ((name . "bookmark") (file . "core-int.tex")) (sequence nil (string ((value . "bookmark")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "cd:name")) "")) (content ((n . "2")) ""))) (command ((name . "version") (type . "environment")) (sequence nil (string ((value . "version")) "")) (arguments nil (keywords ((n . "1") (interactive . "exclusive") (list . "yes")) (constant ((type . "cd:number")) "")))) (command ((name . "setupversions") (file . "core-int.tex")) (sequence nil (string ((value . "setupversions")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "number")) (constant ((type . "cd:number")) "")) (parameter ((name . "style")) (resolve ((name . "style")) ""))))) (command ((name . "markversion") (file . "core-int.tex")) (sequence nil (string ((value . "markversion")) ""))) (command ((name . "selectversion") (file . "core-int.tex")) (sequence nil (string ((value . "selectversion")) ""))) (command ((name . "defineversion") (file . "core-int.tex")) (sequence nil (string ((value . "defineversion")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2") (list . "yes")) (constant ((type . "cd:number")) "")))) (command ((name . "followversion") (file . "core-int.tex")) (sequence nil (string ((value . "followversion")) "")) (arguments nil (content ((n . "1") (interactive . "exclusive")) "") (keywords ((n . "2")) (constant ((type . "cd:text")) "")))) (command ((name . "followprofileversion") (file . "core-int.tex")) (sequence nil (string ((value . "followprofileversion")) "")) (arguments nil (content ((n . "1") (interactive . "exclusive")) "") (keywords ((n . "2")) (constant ((type . "cd:text")) "")) (keywords ((n . "3")) (constant ((type . "cd:name")) "")))) (command ((name . "defineprogram") (file . "core-ref.tex")) (sequence nil (string ((value . "defineprogram")) "")) (arguments nil (keywords ((n . "1") (interactive . "exclusive")) (constant ((type . "cd:name")) "")) (keywords ((n . "2")) (constant ((type . "cd:text")) "")) (keywords ((n . "3")) (constant ((type . "cd:text")) "")))) (command ((name . "setupprograms") (file . "core-ref.tex")) (sequence nil (string ((value . "setupprograms")) "")) (arguments nil (assignments ((n . "1") (interactive . "exclusive") (list . "yes")) (parameter ((name . "directory")) (constant ((type . "cd:text")) ""))))) (command ((name . "program") (file . "core-ref.tex")) (sequence nil (string ((value . "program")) "")) (arguments nil (keywords ((n . "1") (interactive . "exclusive")) (constant ((type . "cd:name")) "")))) (command ((name . "figure") (type . "environment")) (sequence nil (string ((value . "figure")) "")) (arguments nil (keywords ((n . "1") (interactive . "exclusive")) (constant ((type . "cd:name")) "")) (keywords ((n . "2")) (constant ((type . "cd:file")) "")) (assignments ((n . "3") (list . "yes")) (parameter ((name . "factor")) (constant ((type . "cd:number")) "")) (parameter ((name . "frame")) (constant ((type . "on")) "") (constant ((type . "off")) ""))))) (command ((name . "goto") (file . "core-ref.tex")) (sequence nil (string ((value . "goto")) "")) (arguments nil (content ((n . "1") (interactive . "exclusive")) "") (content ((n . "2") (interactive . "exclusive")) "") (reference ((n . "3") (list . "yes")) ""))) (command ((name . "gotobox") (file . "core-ref.tex")) (sequence nil (string ((value . "gotobox")) "")) (arguments nil (content ((n . "1") (interactive . "exclusive")) "") (reference ((n . "2") (list . "yes")) ""))) (command ((name . "button") (file . "core-ref.tex")) (sequence nil (string ((value . "button")) "")) (arguments nil (assignments ((n . "1") (interactive . "exclusive") (optional . "yes") (list . "yes")) (inherit ((name . "setupbuttons") (n . "1")) "")) (content ((n . "2")) "") (reference ((n . "3") (list . "yes")) ""))) (command ((name . "setupbuttons") (file . "core-ref.tex")) (sequence nil (string ((value . "setupbuttons")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "state")) (constant ((type . "start")) "") (constant ((type . "stop")) "")) (inherit ((name . "setupframed") (n . "2")) "")))) (command ((name . "setupcomment") (file . "core-int.tex")) (sequence nil (string ((value . "setupcomment")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "state")) (constant ((type . "start")) "") (constant ((type . "stop")) "")) (parameter ((name . "width")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "height")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "color")) (constant ((type . "cd:name")) "")) (parameter ((name . "title")) (constant ((type . "cd:text")) "")) (parameter ((name . "space")) (constant ((type . "yes")) "") (constant ((type . "no")) "")) (parameter ((name . "symbol")) (constant ((type . "normal")) "") (constant ((type . "New")) "") (constant ((type . "Balloon")) "") (constant ((type . "Addition")) "") (constant ((type . "Help")) "") (constant ((type . "Paragraph")) "") (constant ((type . "Key")) "") (constant ((type . "cd:name")) "")) (parameter ((name . "option")) (constant ((type . "max")) "") (constant ((type . "buffer")) "")) (parameter ((name . "margin")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "distance")) (constant ((type . "cd:dimension")) ""))))) (command ((name . "comment") (type . "environment")) (sequence nil (string ((value . "comment")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (optional . "yes") (list . "yes")) (inherit ((name . "setupcomment") (n . "1")) "")))) (command ((name . "comment")) (sequence nil (string ((value . "comment")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "cd:name")) "")) (assignments ((n . "2") (optional . "yes") (list . "yes")) (inherit ((name . "setupcomment") (n . "1")) "")) (content ((n . "3")) ""))) (command ((name . "definefield") (file . "core-fld.tex")) (sequence nil (string ((value . "definefield")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2")) (constant ((type . "text")) "") (constant ((type . "line")) "") (constant ((type . "push")) "") (constant ((type . "check")) "") (constant ((type . "radio")) "") (constant ((type . "combo")) "") (constant ((type . "choice")) "") (constant ((type . "popup")) "")) (keywords ((n . "3")) (constant ((type . "cd:name")) "")) (keywords ((n . "4") (list . "yes")) (constant ((type . "cd:name")) "")) (keywords ((n . "5") (optional . "yes")) (constant ((type . "cd:name")) "")))) (command ((name . "definesubfield") (file . "core-fld.tex")) (sequence nil (string ((value . "definesubfield")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2")) (constant ((type . "cd:name")) "")) (keywords ((n . "3") (list . "yes")) (constant ((type . "cd:name")) "")))) (command ((name . "copyfield") (file . "core-fld.tex")) (sequence nil (string ((value . "copyfield")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2") (list . "yes")) (constant ((type . "cd:name")) "")))) (command ((name . "clonefield") (file . "core-fld.tex")) (sequence nil (string ((value . "clonefield")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2") (list . "yes")) (constant ((type . "cd:name")) "")) (keywords ((n . "3")) (constant ((type . "cd:name")) "")) (keywords ((n . "4") (optional . "yes") (list . "yes")) (constant ((type . "cd:name")) "")))) (command ((name . "field") (file . "core-fld.tex")) (sequence nil (string ((value . "field")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")))) (command ((name . "fitfield") (file . "core-fld.tex")) (sequence nil (string ((value . "fitfield")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")))) (command ((name . "fillinfield") (file . "core-fld.tex")) (sequence nil (string ((value . "fillinfield")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "cd:text")) "")) (content ((n . "2")) ""))) (command ((name . "tooltip") (file . "core-fld.tex")) (sequence nil (string ((value . "tooltip")) "")) (arguments nil (keywords ((n . "1") (optional . "yes")) (constant ((type . "left")) "") (constant ((type . "right")) "") (constant ((type . "middle")) "")) (content ((n . "2")) "") (content ((n . "3")) ""))) (command ((name . "showfields") (file . "core-fld.tex")) (sequence nil (string ((value . "showfields")) "")) (arguments nil (keywords ((n . "1") (optional . "yes") (list . "yes")) (constant ((type . "cd:name")) "")))) (command ((name . "logfields") (file . "core-fld.tex")) (sequence nil (string ((value . "logfields")) ""))) (command ((name . "setupfield") (file . "core-fld.tex")) (sequence nil (string ((value . "setupfield")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2") (list . "yes")) (constant ((type . "label")) "") (constant ((type . "horizontal")) "") (constant ((type . "vertical")) "") (constant ((type . "frame")) "")) (assignments ((n . "3") (list . "yes")) (inherit ((name . "setupfields") (n . "2")) "")) (assignments ((n . "4") (list . "yes"))) (assignments ((n . "5") (list . "yes"))))) (command ((name . "setupfields") (file . "core-fld.tex")) (sequence nil (string ((value . "setupfields")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "reset")) "") (constant ((type . "label")) "") (constant ((type . "horizontal")) "") (constant ((type . "vertical")) "") (constant ((type . "frame")) "")) (assignments ((n . "2") (list . "yes")) (parameter ((name . "n")) (constant ((type . "cd:number")) "")) (parameter ((name . "distance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "before")) (constant ((type . "cd:command")) "")) (parameter ((name . "after")) (constant ((type . "cd:command")) "")) (parameter ((name . "inbetween")) (constant ((type . "cd:command")) "")) (parameter ((name . "color")) (constant ((type . "cd:name")) "")) (parameter ((name . "style")) (resolve ((name . "style")) "")) (parameter ((name . "align")) (resolve ((name . "align")) "")) (parameter ((name . "option")) (constant ((type . "readonly")) "") (constant ((type . "required")) "") (constant ((type . "protected")) "") (constant ((type . "sorted")) "") (constant ((type . "unavailable")) "") (constant ((type . "hidden")) "") (constant ((type . "printable")) "")) (parameter ((name . "clickin")) (constant ((type . "cd:reference")) "")) (parameter ((name . "clickout")) (constant ((type . "cd:reference")) "")) (parameter ((name . "regionin")) (constant ((type . "cd:reference")) "")) (parameter ((name . "regionout")) (constant ((type . "cd:reference")) "")) (parameter ((name . "afterkey")) (constant ((type . "cd:reference")) "")) (parameter ((name . "format")) (constant ((type . "cd:reference")) "")) (parameter ((name . "validate")) (constant ((type . "cd:reference")) "")) (parameter ((name . "calculate")) (constant ((type . "cd:reference")) "")) (parameter ((name . "fieldoffset")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "fieldframecolor")) (constant ((type . "cd:name")) "")) (parameter ((name . "fieldbackgroundcolor")) (constant ((type . "cd:name")) "")) (inherit ((name . "setupframed") (n . "2")) "")) (assignments ((n . "3") (list . "yes")) (inherit ((name . "setupfields") (n . "2")) "")) (assignments ((n . "4") (list . "yes")) (inherit ((name . "setupfields") (n . "2")) "")))) (command ((name . "setupforms") (file . "core-fld.tex")) (sequence nil (string ((value . "setupforms")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "method")) (constant ((type . "HTML")) "") (constant ((type . "FDF")) ""))))) (command ((name . "definefieldstack") (file . "core-fld.tex")) (sequence nil (string ((value . "definefieldstack")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2") (list . "yes")) (constant ((type . "cd:name")) "")) (assignments ((n . "3") (list . "yes")) (inherit ((name . "setupfields") (n . "2")) "")))) (command ((name . "fieldstack") (file . "core-fld.tex")) (sequence nil (string ((value . "fieldstack")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2") (optional . "yes") (list . "yes")) (constant ((type . "cd:name")) "")) (assignments ((n . "3") (optional . "yes") (list . "yes")) (inherit ((name . "setupfields") (n . "2")) "")))) (command ((name . "clip") (file . "core-trf.tex")) (sequence nil (string ((value . "clip")) "")) (arguments nil (assignments ((n . "1") (optional . "yes") (list . "yes")) (inherit ((name . "setupclipping") (n . "1")) "")) (content ((n . "2")) ""))) (command ((name . "setupclipping") (file . "core-trf.tex")) (sequence nil (string ((value . "setupclipping")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "state")) (constant ((type . "start")) "") (constant ((type . "stop")) "")) (parameter ((name . "n")) (constant ((type . "cd:number") (default . "1")) "")) (parameter ((name . "nx")) (constant ((type . "cd:number")) "")) (parameter ((name . "ny")) (constant ((type . "cd:number")) "")) (parameter ((name . "x")) (constant ((type . "cd:number") (default . "1")) "")) (parameter ((name . "y")) (constant ((type . "cd:number") (default . "1")) "")) (parameter ((name . "sx")) (constant ((type . "cd:number") (default . "1")) "")) (parameter ((name . "sy")) (constant ((type . "cd:number") (default . "1")) "")) (parameter ((name . "width")) (constant ((type . "cd:dimension") (default . "0pt")) "")) (parameter ((name . "height")) (constant ((type . "cd:dimension") (default . "0pt")) "")) (parameter ((name . "hoffset")) (constant ((type . "cd:dimension") (default . "0pt")) "")) (parameter ((name . "voffset")) (constant ((type . "cd:dimension") (default . "0pt")) "")) (parameter ((name . "offset")) (constant ((type . "cd:dimension") (default . "0pt")) "")) (parameter ((name . "leftoffset")) (constant ((type . "cd:dimension") (default . "0pt")) "")) (parameter ((name . "rightoffset")) (constant ((type . "cd:dimension") (default . "0pt")) "")) (parameter ((name . "topoffset")) (constant ((type . "cd:dimension") (default . "0pt")) "")) (parameter ((name . "bottomoffset")) (constant ((type . "cd:dimension") (default . "0pt")) "")) (parameter ((name . "mp")) (constant ((type . "cd:name") (default . " ")) ""))))) (command ((name . "placelegend")) (sequence nil (string ((value . "placelegend")) "")) (arguments nil (content ((n . "1")) "") (content ((n . "2")) ""))) (command ((name . "setuplegend")) (sequence nil (string ((value . "setuplegend")) "")) (arguments nil (assignments ((n . "1") (list . "yes")) (parameter ((name . "n")) (constant ((type . "cd:number")) "")) (parameter ((name . "distance")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "inbetween")) (constant ((type . "cd:command")) "")) (parameter ((name . "width")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "height")) (constant ((type . "cd:dimension")) "")) (parameter ((name . "location")) (constant ((type . "right")) "") (constant ((type . "bottom")) "")) (parameter ((name . "bodyfont")) (resolve ((name . "bodyfont")) ""))))) (command ((name . "setupstrut") (file . "core-spa.tex")) (sequence nil (string ((value . "setupstrut")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "yes") (default . "yes")) "") (constant ((type . "no")) "") (constant ((type . "cap")) "") (constant ((type . "cd:text")) "")))) (command ((name . "usetypescriptfile") (file . "type-ini.tex")) (sequence nil (string ((value . "usetypescriptfile")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "cd:file")) "")))) (command ((name . "usetypescript") (file . "type-ini.tex")) (sequence nil (string ((value . "usetypescript")) "")) (arguments nil (keywords ((n . "1") (list . "yes")) (constant ((type . "cd:name")) "")) (keywords ((n . "2") (optional . "yes") (list . "yes")) (constant ((type . "cd:name")) "")) (keywords ((n . "3") (optional . "yes") (list . "yes")) (constant ((type . "cd:name")) "")))) (command ((name . "definetypeface") (file . "type-ini.tex")) (sequence nil (string ((value . "definetypeface")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:text")) "")) (keywords ((n . "2")) (constant ((type . "rm")) "") (constant ((type . "ss")) "") (constant ((type . "tt")) "") (constant ((type . "mm")) "") (constant ((type . "hw")) "") (constant ((type . "cg")) "")) (keywords ((n . "3")) (constant ((type . "cd:name")) "")) (keywords ((n . "4")) (constant ((type . "cd:name")) "")) (keywords ((n . "5") (optional . "yes")) (constant ((type . "cd:name")) "")) (assignments ((n . "6") (optional . "yes")) (parameter ((name . "features")) (constant ((type . "cd:name")) "")) (parameter ((name . "rscale")) (constant ((type . "cd:number")) "")) (parameter ((name . "encoding")) (constant ((type . "cd:name")) "")) (parameter ((name . "text")) (constant ((type . "cd:name")) ""))))) (command ((name . "definefontfeature") (file . "type-ini.tex")) (sequence nil (string ((value . "definefontfeature")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:text")) "")) (keywords ((n . "2") (optional . "yes")) (constant ((type . "cd:name")) "")) (assignments ((n . "3") (optional . "no")) (parameter ((name . "compose")) (constant ((type . "no") (default . "yes")) "") (constant ((type . "yes")) "")) (parameter ((name . "mode")) (constant ((type . "node")) "") (constant ((type . "base") (default . "yes")) "")) (parameter ((name . "tlig")) (constant ((type . "no") (default . "yes")) "") (constant ((type . "yes")) "")) (parameter ((name . "trep")) (constant ((type . "no") (default . "yes")) "") (constant ((type . "yes")) "")) (parameter ((name . "script")) (constant ((type . "cd:name")) "")) (parameter ((name . "language")) (constant ((type . "cd:name")) "")) (parameter ((name . "..tag..")) (constant ((type . "no") (default . "yes")) "") (constant ((type . "yes")) ""))))) (command ((name . "definefonthandling") (file . "hand-ini.mkii")) (sequence nil (string ((value . "definefonthandling")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (keywords ((n . "2")) (constant ((type . "cd:name") (list . "yes")) "")) (assignments ((n . "3")) (parameter ((name . "type")) (constant ((type . "hanging") (default . "yes")) "") (constant ((type . "hz")) "") (constant ((type . "spacing")) "") (constant ((type . "tag")) "")) (parameter ((name . "right")) (constant ((type . "cd:number")) "")) (parameter ((name . "left")) (constant ((type . "cd:number")) "")) (parameter ((name . "factor")) (constant ((type . "cd:number")) "")) (parameter ((name . "min")) (constant ((type . "cd:number")) "")) (parameter ((name . "max")) (constant ((type . "cd:number")) "")) (parameter ((name . "step")) (constant ((type . "cd:number")) ""))))) (command ((name . "setupfonthandling") (file . "hand-ini.mkii")) (sequence nil (string ((value . "setupfonthandling")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2")) (inherit ((name . "definefonthandling") (n . "2")) "")))) (command ((name . "definefontsynonym") (file . "font-ini.tex")) (sequence nil (string ((value . "definefontsynonym")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:text")) "")) (keywords ((n . "2")) (constant ((type . "cd:name")) "")) (assignments ((n . "3") (optional . "yes")) (parameter ((name . "encoding")) (constant ((type . "cd:name")) "")) (parameter ((name . "features")) (constant ((type . "cd:name")) "")) (parameter ((name . "handling")) (constant ((type . "cd:name")) "")) (parameter ((name . "mapping")) (constant ((type . "cd:name")) ""))))) (command ((name . "setupfontsynonym") (file . "font-ini.tex")) (sequence nil (string ((value . "setupfontsynonym")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:name")) "")) (assignments ((n . "2")) (inherit ((name . "definefontsynonym") (n . "3")) "")))) (command ((name . "mapfontsize") (file . "font-ini.tex") (category . "fonts")) (sequence nil (string ((value . "mapfontsize")) "")) (arguments nil (keywords ((n . "1")) (constant ((type . "cd:dimension")) "")) (keywords ((n . "2")) (constant ((type . "cd:dimension")) "")))) (command ((name . "definedfont") (file . "font-ini.tex") (category . "fonts")) (sequence nil (string ((value . "definedfont")) "")) (arguments nil (keywords ((n . "1")) (inherit ((name . "definefont") (n . "2")) "")))))
